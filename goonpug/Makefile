# Copyright (c) 2013 Peter Rowlands

HL2SDK_CSGO = ../hl2sdk-csgo
MMSOURCE = ../mmsource-central

PROJECT = goonpug

VERSION_HEADER = gp_version.h

CC = gcc

CFLAGS += -Wall
OPT_FLAGS = -O3 -funroll-loops -pipe
GCC4_FLAGS = -fvisibility=hidden -fvisibility-inlines-hidden
DEBUG_FLAGS = -g -ggdb3 -D_DEBUG

HL2SDK = $(HL2SDK_CSGO)
CFLAGS += -DSOURCE_ENGINE=12

HL2PUB = $(HL2SDK)/public

INCLUDE += -I$(HL2SDK)/public/game/server
METAMOD = $(MMSOURCE)/core

OS := $(shell uname -s)
ENGINE = csgo

ifeq "$(OS)" "Darwin"
	CC = clang
	LIB_EXT = dylib
	HL2LIB = $(HL2SDK)/lib/mac
	PBLIB = $(HL2SDK)/lib/osx32/release
else
	LIB_EXT = so
	HL2LIB = $(HL2SDK)/lib/linux
	PBLIB = $(HL2SDK)/lib/linux32/release
endif

LIB_PREFIX = lib
LIB_SUFFIX = .$(LIB_EXT)

CFLAGS += -DSE_EPISODEONE=1 -DSE_DARKMESSIAH=2 -DSE_ORANGEBOX=3 -DSE_BLOODYGOODTIME=4 -DSE_EYE=5 \
	-DSE_CSS=6 -DSE_ORANGEBOXVALVE=7 -DSE_LEFT4DEAD=8 -DSE_LEFT4DEAD2=9 -DSE_ALIENSWARM=10 \
	-DSE_PORTAL2=11 -DSE_CSGO=12

LINK += -L$(HL2LIB) $(HL2LIB)/tier1_i486.a -lvstdlib -ltier0 -L$(PBLIB) -lprotobuf

ifeq "$(ENGINE)" "csgo"
	LINK += $(HL2LIB)/interfaces_i486.a
endif

INCLUDE += -I. -I.. -I$(HL2PUB) -I$(HL2PUB)/engine -I$(HL2PUB)/mathlib -I$(HL2PUB)/vstdlib \
	-I$(HL2PUB)/tier0 -I$(HL2PUB)/tier1 -I. -I$(METAMOD) -I$(METAMOD)/sourcehook \
	-I$(HL2PUB)/game/shared/csgo/protobuf -I$(HL2PUB)/engine/protobuf \
	-I$(HL2SDK)/common/protobuf-2.3.0/src

BINARY = $(PROJECT).$(LIB_EXT)

ifeq "$(OS)" "Darwin"
	LIB_EXT = dylib
	CFLAGS += -DOSX -D_OSX
	LINK += -dynamiclib -lstdc++ -mmacosx-version-min=10.5
else
	LIB_EXT = so
	CFLAGS += -D_LINUX
	LINK += -shared
endif

IS_CLANG := $(shell $(CC) --version | head -1 | grep clang > /dev/null && echo "1" || echo "0")

ifeq "$(IS_CLANG)" "1"
	CC_MAJOR := $(shell $(CC) --version | grep clang | sed "s/.*version \([0-9]\)*\.[0-9]*.*/\1/")
	CC_MINOR := $(shell $(CC) --version | grep clang | sed "s/.*version [0-9]*\.\([0-9]\)*.*/\1/")
else
	CC_MAJOR := $(shell $(CC) -dumpversion >&1 | cut -b1)
	CC_MINOR := $(shell $(CC) -dumpversion >&1 | cut -b3)
endif

CFLAGS += -DPOSIX -Dstricmp=strcasecmp -D_stricmp=strcasecmp -D_strnicmp=strncasecmp \
	-Dstrnicmp=strncasecmp -D_snprintf=snprintf -D_vsnprintf=vsnprintf -D_alloca=alloca \
	-Dstrcmpi=strcasecmp -DCOMPILER_GCC -Wall -Wno-non-virtual-dtor -Wno-overloaded-virtual \
	-Werror -Wno-error=sign-compare -fPIC -fno-exceptions -fno-rtti -msse -m32 -fno-strict-aliasing

# Clang || GCC >= 4
ifeq "$(shell expr $(IS_CLANG) \| $(CC_MAJOR) \>= 4)" "1"
	CFLAGS += $(GCC4_FLAGS)
endif

# Clang >= 3 || GCC >= 4.7
ifeq "$(shell expr $(IS_CLANG) \& $(CC_MAJOR) \>= 3 \| $(CC_MAJOR) \>= 4 \& $(CC_MINOR) \>= 7)" "1"
	CFLAGS += -Wno-delete-non-virtual-dtor
endif

# OS is Linux and not using clang
ifeq "$(shell expr $(OS) \= Linux \& $(IS_CLANG) \= 0)" "1"
	LINK += -static-libgcc
endif

BIN_DIR = ../export/Release.$(ENGINE)

all: gitversion builddir $(BINARY)

builddir:
	mkdir -p $(BIN_DIR)

debug: BIN_DIR = ../export/Debug.$(ENGINE)
debug: CFLAGS += $(DEBUG_FLAGS)
debug: OPT_FLAGS = 
debug: all

CPP_FILES := $(wildcard *.cpp)
OBJ_FILES := $(patsubst %.cpp, %.o, $(CPP_FILES)) protobuf.o

protobuf.o: \
	$(HL2PUB)/game/shared/csgo/protobuf/cstrike15_usermessage_helpers.cpp \
	$(HL2PUB)/game/shared/csgo/protobuf/cstrike15_usermessages.pb.cc \
	$(HL2PUB)/engine/protobuf/netmessages.pb.cc
	$(CC) $(INCLUDE) $(CFLAGS) $(OPT_FLAGS) -c -o $@ $<

$(BINARY): $(OBJ_FILES)
	$(CC) $(INCLUDE) -m32 $(LINK) -ldl -lm -o $(BIN_DIR)/$@ $^

%.o: %.cpp
	$(CC) $(INCLUDE) $(CFLAGS) $(OPT_FLAGS) -c -o $@ $<

default: all

clean: 
	rm -rf *.o
	rm -rf ../export/Release.$(ENGINE)/$(BINARY) ../export/Release.$(ENGINE)/$(BINARY)
	rm -rf ../export/Debug.$(ENGINE)/$(BINARY) ../export/Debug.$(ENGINE)/$(BINARY)

.PHONY: gitversion
gitversion:
	@(GOONPUG_VERSION="" ; \
		[ -e "$(VERSION_HEADER)" ] && GOONPUG_VERSION=$$(grep "define GOONPUG_VERSION " $(VERSION_HEADER) | cut -f3 -d" " | sed 's/"//g') ; \
		GIT_VERSION=$$(git describe --always --tags --dirty) ;\
		echo "GOONPUG_VERSION = $$GOONPUG_VERSION" ; \
		echo "GIT_VERSION = $$GIT_VERSION" ; \
		if [ "$${GIT_VERSION}" != "$${GOONPUG_VERSION}" ] ; then \
			echo "Updating $(VERSION_HEADER)" ; \
			printf "// THIS FILE IS AUTOGENERATED BY MAKE. DO NOT EDIT\n#ifndef _GOONPUG_VERSION_H_\n#define _GOONPUG_VERSION_H_\n\n#define GOONPUG_VERSION \"$${GIT_VERSION}\"\n\n#endif /* ! _GOONPUG_VERSION_H_ */" > $(VERSION_HEADER) \
			$(MAKE) clean ; \
		fi )
