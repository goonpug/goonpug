// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cstrike15_usermessages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CCSUsrMsg_VGUIMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VGUIMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VGUIMenu_Subkey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VGUIMenu_Subkey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Geiger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Geiger_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Train_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Train_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_HudText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_HudText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SayText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SayText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SayText2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SayText2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_TextMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_TextMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_HudMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_HudMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Shake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Shake_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Fade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Fade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Rumble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Rumble_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CloseCaption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CloseCaption_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CloseCaptionDirect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CloseCaptionDirect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SendAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SendAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RawAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RawAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoiceMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoiceMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoiceMask_PlayerMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoiceMask_PlayerMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_Damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_Damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RadioText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RadioText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_HintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_HintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_KeyHintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_KeyHintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ProcessSpottedEntityUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ReloadEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ReloadEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_AdjustMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_AdjustMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_KillCam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_KillCam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_DesiredTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_DesiredTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CurrentTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CurrentTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_AchievementEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_AchievementEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_MatchEndConditions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_MatchEndConditions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerStatsUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_PlayerStatsUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_PlayerStatsUpdate_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_DisplayInventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_DisplayInventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_XRankGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_XRankGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_XRankUpd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_XRankUpd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SetPlayerEloDisplayBracket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SetPlayerEloDisplayBracket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RequestEloBracketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RequestEloBracketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SetEloBracketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SetEloBracketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_CallVoteFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_CallVoteFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoteStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VotePass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VotePass_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoteFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_VoteSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_SendLastKillerDamageToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_SendLastKillerDamageToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ServerRankUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ServerRankUpdate_RankUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ItemPickup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ItemPickup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ShowMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ShowMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_BarTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_BarTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_AmmoDenied_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_AmmoDenied_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_MarkAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_MarkAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_MatchStatsUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_MatchStatsUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ItemDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ItemDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ResetHud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ResetHud_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_GameTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_GameTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_RequestState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_RequestState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_StopSpectatorMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_StopSpectatorMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_DisconnectToLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_DisconnectToLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_WarmupHasEnded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_WarmupHasEnded_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ClientInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankRevealAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSUsrMsg_ServerRankRevealAll_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECstrike15UserMessages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cstrike15_5fusermessages_2eproto() {
  protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cstrike15_usermessages.proto");
  GOOGLE_CHECK(file != NULL);
  CCSUsrMsg_VGUIMenu_descriptor_ = file->message_type(0);
  static const int CCSUsrMsg_VGUIMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, subkeys_),
  };
  CCSUsrMsg_VGUIMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VGUIMenu_descriptor_,
      CCSUsrMsg_VGUIMenu::default_instance_,
      CCSUsrMsg_VGUIMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VGUIMenu));
  CCSUsrMsg_VGUIMenu_Subkey_descriptor_ = CCSUsrMsg_VGUIMenu_descriptor_->nested_type(0);
  static const int CCSUsrMsg_VGUIMenu_Subkey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu_Subkey, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu_Subkey, str_),
  };
  CCSUsrMsg_VGUIMenu_Subkey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VGUIMenu_Subkey_descriptor_,
      CCSUsrMsg_VGUIMenu_Subkey::default_instance_,
      CCSUsrMsg_VGUIMenu_Subkey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu_Subkey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VGUIMenu_Subkey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VGUIMenu_Subkey));
  CCSUsrMsg_Geiger_descriptor_ = file->message_type(1);
  static const int CCSUsrMsg_Geiger_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Geiger, range_),
  };
  CCSUsrMsg_Geiger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Geiger_descriptor_,
      CCSUsrMsg_Geiger::default_instance_,
      CCSUsrMsg_Geiger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Geiger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Geiger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Geiger));
  CCSUsrMsg_Train_descriptor_ = file->message_type(2);
  static const int CCSUsrMsg_Train_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Train, train_),
  };
  CCSUsrMsg_Train_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Train_descriptor_,
      CCSUsrMsg_Train::default_instance_,
      CCSUsrMsg_Train_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Train, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Train, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Train));
  CCSUsrMsg_HudText_descriptor_ = file->message_type(3);
  static const int CCSUsrMsg_HudText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudText, text_),
  };
  CCSUsrMsg_HudText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_HudText_descriptor_,
      CCSUsrMsg_HudText::default_instance_,
      CCSUsrMsg_HudText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_HudText));
  CCSUsrMsg_SayText_descriptor_ = file->message_type(4);
  static const int CCSUsrMsg_SayText_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, chat_),
  };
  CCSUsrMsg_SayText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SayText_descriptor_,
      CCSUsrMsg_SayText::default_instance_,
      CCSUsrMsg_SayText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SayText));
  CCSUsrMsg_SayText2_descriptor_ = file->message_type(5);
  static const int CCSUsrMsg_SayText2_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, params_),
  };
  CCSUsrMsg_SayText2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SayText2_descriptor_,
      CCSUsrMsg_SayText2::default_instance_,
      CCSUsrMsg_SayText2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SayText2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SayText2));
  CCSUsrMsg_TextMsg_descriptor_ = file->message_type(6);
  static const int CCSUsrMsg_TextMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_TextMsg, msg_dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_TextMsg, params_),
  };
  CCSUsrMsg_TextMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_TextMsg_descriptor_,
      CCSUsrMsg_TextMsg::default_instance_,
      CCSUsrMsg_TextMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_TextMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_TextMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_TextMsg));
  CCSUsrMsg_HudMsg_descriptor_ = file->message_type(7);
  static const int CCSUsrMsg_HudMsg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, clr1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, clr2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, fade_in_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, fade_out_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, fx_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, text_),
  };
  CCSUsrMsg_HudMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_HudMsg_descriptor_,
      CCSUsrMsg_HudMsg::default_instance_,
      CCSUsrMsg_HudMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HudMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_HudMsg));
  CCSUsrMsg_Shake_descriptor_ = file->message_type(8);
  static const int CCSUsrMsg_Shake_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, local_amplitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, duration_),
  };
  CCSUsrMsg_Shake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Shake_descriptor_,
      CCSUsrMsg_Shake::default_instance_,
      CCSUsrMsg_Shake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Shake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Shake));
  CCSUsrMsg_Fade_descriptor_ = file->message_type(9);
  static const int CCSUsrMsg_Fade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, clr_),
  };
  CCSUsrMsg_Fade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Fade_descriptor_,
      CCSUsrMsg_Fade::default_instance_,
      CCSUsrMsg_Fade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Fade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Fade));
  CCSUsrMsg_Rumble_descriptor_ = file->message_type(10);
  static const int CCSUsrMsg_Rumble_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, flags_),
  };
  CCSUsrMsg_Rumble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Rumble_descriptor_,
      CCSUsrMsg_Rumble::default_instance_,
      CCSUsrMsg_Rumble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Rumble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Rumble));
  CCSUsrMsg_CloseCaption_descriptor_ = file->message_type(11);
  static const int CCSUsrMsg_CloseCaption_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, from_player_),
  };
  CCSUsrMsg_CloseCaption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CloseCaption_descriptor_,
      CCSUsrMsg_CloseCaption::default_instance_,
      CCSUsrMsg_CloseCaption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CloseCaption));
  CCSUsrMsg_CloseCaptionDirect_descriptor_ = file->message_type(12);
  static const int CCSUsrMsg_CloseCaptionDirect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, from_player_),
  };
  CCSUsrMsg_CloseCaptionDirect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CloseCaptionDirect_descriptor_,
      CCSUsrMsg_CloseCaptionDirect::default_instance_,
      CCSUsrMsg_CloseCaptionDirect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CloseCaptionDirect));
  CCSUsrMsg_SendAudio_descriptor_ = file->message_type(13);
  static const int CCSUsrMsg_SendAudio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendAudio, radio_sound_),
  };
  CCSUsrMsg_SendAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SendAudio_descriptor_,
      CCSUsrMsg_SendAudio::default_instance_,
      CCSUsrMsg_SendAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SendAudio));
  CCSUsrMsg_RawAudio_descriptor_ = file->message_type(14);
  static const int CCSUsrMsg_RawAudio_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, entidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, voice_filename_),
  };
  CCSUsrMsg_RawAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RawAudio_descriptor_,
      CCSUsrMsg_RawAudio::default_instance_,
      CCSUsrMsg_RawAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RawAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RawAudio));
  CCSUsrMsg_VoiceMask_descriptor_ = file->message_type(15);
  static const int CCSUsrMsg_VoiceMask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask, player_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask, player_mod_enable_),
  };
  CCSUsrMsg_VoiceMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoiceMask_descriptor_,
      CCSUsrMsg_VoiceMask::default_instance_,
      CCSUsrMsg_VoiceMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoiceMask));
  CCSUsrMsg_VoiceMask_PlayerMask_descriptor_ = CCSUsrMsg_VoiceMask_descriptor_->nested_type(0);
  static const int CCSUsrMsg_VoiceMask_PlayerMask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, game_rules_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, ban_masks_),
  };
  CCSUsrMsg_VoiceMask_PlayerMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoiceMask_PlayerMask_descriptor_,
      CCSUsrMsg_VoiceMask_PlayerMask::default_instance_,
      CCSUsrMsg_VoiceMask_PlayerMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoiceMask_PlayerMask));
  CCSUsrMsg_Damage_descriptor_ = file->message_type(16);
  static const int CCSUsrMsg_Damage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, inflictor_world_pos_),
  };
  CCSUsrMsg_Damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_Damage_descriptor_,
      CCSUsrMsg_Damage::default_instance_,
      CCSUsrMsg_Damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_Damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_Damage));
  CCSUsrMsg_RadioText_descriptor_ = file->message_type(17);
  static const int CCSUsrMsg_RadioText_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, msg_dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, params_),
  };
  CCSUsrMsg_RadioText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RadioText_descriptor_,
      CCSUsrMsg_RadioText::default_instance_,
      CCSUsrMsg_RadioText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RadioText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RadioText));
  CCSUsrMsg_HintText_descriptor_ = file->message_type(18);
  static const int CCSUsrMsg_HintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HintText, text_),
  };
  CCSUsrMsg_HintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_HintText_descriptor_,
      CCSUsrMsg_HintText::default_instance_,
      CCSUsrMsg_HintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_HintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_HintText));
  CCSUsrMsg_KeyHintText_descriptor_ = file->message_type(19);
  static const int CCSUsrMsg_KeyHintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KeyHintText, hints_),
  };
  CCSUsrMsg_KeyHintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_KeyHintText_descriptor_,
      CCSUsrMsg_KeyHintText::default_instance_,
      CCSUsrMsg_KeyHintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KeyHintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KeyHintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_KeyHintText));
  CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_ = file->message_type(20);
  static const int CCSUsrMsg_ProcessSpottedEntityUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate, new_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate, entity_updates_),
  };
  CCSUsrMsg_ProcessSpottedEntityUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_,
      CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_,
      CCSUsrMsg_ProcessSpottedEntityUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ProcessSpottedEntityUpdate));
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_ = CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_->nested_type(0);
  static const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, entity_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, angle_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, defuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, player_has_defuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, player_has_c4_),
  };
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_,
      CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_,
      CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate));
  CCSUsrMsg_ReloadEffect_descriptor_ = file->message_type(21);
  static const int CCSUsrMsg_ReloadEffect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, entidx_),
  };
  CCSUsrMsg_ReloadEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ReloadEffect_descriptor_,
      CCSUsrMsg_ReloadEffect::default_instance_,
      CCSUsrMsg_ReloadEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ReloadEffect));
  CCSUsrMsg_AdjustMoney_descriptor_ = file->message_type(22);
  static const int CCSUsrMsg_AdjustMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AdjustMoney, amount_),
  };
  CCSUsrMsg_AdjustMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_AdjustMoney_descriptor_,
      CCSUsrMsg_AdjustMoney::default_instance_,
      CCSUsrMsg_AdjustMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AdjustMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AdjustMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_AdjustMoney));
  CCSUsrMsg_KillCam_descriptor_ = file->message_type(23);
  static const int CCSUsrMsg_KillCam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, obs_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, first_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, second_target_),
  };
  CCSUsrMsg_KillCam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_KillCam_descriptor_,
      CCSUsrMsg_KillCam::default_instance_,
      CCSUsrMsg_KillCam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_KillCam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_KillCam));
  CCSUsrMsg_DesiredTimescale_descriptor_ = file->message_type(24);
  static const int CCSUsrMsg_DesiredTimescale_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, desired_timescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, duration_realtime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, interpolator_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, start_blend_time_),
  };
  CCSUsrMsg_DesiredTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_DesiredTimescale_descriptor_,
      CCSUsrMsg_DesiredTimescale::default_instance_,
      CCSUsrMsg_DesiredTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_DesiredTimescale));
  CCSUsrMsg_CurrentTimescale_descriptor_ = file->message_type(25);
  static const int CCSUsrMsg_CurrentTimescale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentTimescale, cur_timescale_),
  };
  CCSUsrMsg_CurrentTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CurrentTimescale_descriptor_,
      CCSUsrMsg_CurrentTimescale::default_instance_,
      CCSUsrMsg_CurrentTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CurrentTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CurrentTimescale));
  CCSUsrMsg_AchievementEvent_descriptor_ = file->message_type(26);
  static const int CCSUsrMsg_AchievementEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, user_id_),
  };
  CCSUsrMsg_AchievementEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_AchievementEvent_descriptor_,
      CCSUsrMsg_AchievementEvent::default_instance_,
      CCSUsrMsg_AchievementEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_AchievementEvent));
  CCSUsrMsg_MatchEndConditions_descriptor_ = file->message_type(27);
  static const int CCSUsrMsg_MatchEndConditions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, fraglimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, mp_maxrounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, mp_winlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, mp_timelimit_),
  };
  CCSUsrMsg_MatchEndConditions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_MatchEndConditions_descriptor_,
      CCSUsrMsg_MatchEndConditions::default_instance_,
      CCSUsrMsg_MatchEndConditions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_MatchEndConditions));
  CCSUsrMsg_PlayerStatsUpdate_descriptor_ = file->message_type(28);
  static const int CCSUsrMsg_PlayerStatsUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, official_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, crc_),
  };
  CCSUsrMsg_PlayerStatsUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_PlayerStatsUpdate_descriptor_,
      CCSUsrMsg_PlayerStatsUpdate::default_instance_,
      CCSUsrMsg_PlayerStatsUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_PlayerStatsUpdate));
  CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_ = CCSUsrMsg_PlayerStatsUpdate_descriptor_->nested_type(0);
  static const int CCSUsrMsg_PlayerStatsUpdate_Stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, delta_),
  };
  CCSUsrMsg_PlayerStatsUpdate_Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_,
      CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_,
      CCSUsrMsg_PlayerStatsUpdate_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_PlayerStatsUpdate_Stat));
  CCSUsrMsg_DisplayInventory_descriptor_ = file->message_type(29);
  static const int CCSUsrMsg_DisplayInventory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, display_),
  };
  CCSUsrMsg_DisplayInventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_DisplayInventory_descriptor_,
      CCSUsrMsg_DisplayInventory::default_instance_,
      CCSUsrMsg_DisplayInventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_DisplayInventory));
  CCSUsrMsg_XRankGet_descriptor_ = file->message_type(30);
  static const int CCSUsrMsg_XRankGet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankGet, mode_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankGet, controller_),
  };
  CCSUsrMsg_XRankGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_XRankGet_descriptor_,
      CCSUsrMsg_XRankGet::default_instance_,
      CCSUsrMsg_XRankGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_XRankGet));
  CCSUsrMsg_XRankUpd_descriptor_ = file->message_type(31);
  static const int CCSUsrMsg_XRankUpd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, mode_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, ranking_),
  };
  CCSUsrMsg_XRankUpd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_XRankUpd_descriptor_,
      CCSUsrMsg_XRankUpd::default_instance_,
      CCSUsrMsg_XRankUpd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_XRankUpd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_XRankUpd));
  CCSUsrMsg_SetPlayerEloDisplayBracket_descriptor_ = file->message_type(32);
  static const int CCSUsrMsg_SetPlayerEloDisplayBracket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetPlayerEloDisplayBracket, bracket_),
  };
  CCSUsrMsg_SetPlayerEloDisplayBracket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SetPlayerEloDisplayBracket_descriptor_,
      CCSUsrMsg_SetPlayerEloDisplayBracket::default_instance_,
      CCSUsrMsg_SetPlayerEloDisplayBracket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetPlayerEloDisplayBracket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetPlayerEloDisplayBracket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SetPlayerEloDisplayBracket));
  CCSUsrMsg_RequestEloBracketInfo_descriptor_ = file->message_type(33);
  static const int CCSUsrMsg_RequestEloBracketInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestEloBracketInfo, bracket_),
  };
  CCSUsrMsg_RequestEloBracketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RequestEloBracketInfo_descriptor_,
      CCSUsrMsg_RequestEloBracketInfo::default_instance_,
      CCSUsrMsg_RequestEloBracketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestEloBracketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestEloBracketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RequestEloBracketInfo));
  CCSUsrMsg_SetEloBracketInfo_descriptor_ = file->message_type(34);
  static const int CCSUsrMsg_SetEloBracketInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetEloBracketInfo, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetEloBracketInfo, display_bracket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetEloBracketInfo, prev_bracket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetEloBracketInfo, num_games_in_bracket_),
  };
  CCSUsrMsg_SetEloBracketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SetEloBracketInfo_descriptor_,
      CCSUsrMsg_SetEloBracketInfo::default_instance_,
      CCSUsrMsg_SetEloBracketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetEloBracketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SetEloBracketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SetEloBracketInfo));
  CCSUsrMsg_CallVoteFailed_descriptor_ = file->message_type(35);
  static const int CCSUsrMsg_CallVoteFailed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, time_),
  };
  CCSUsrMsg_CallVoteFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_CallVoteFailed_descriptor_,
      CCSUsrMsg_CallVoteFailed::default_instance_,
      CCSUsrMsg_CallVoteFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_CallVoteFailed));
  CCSUsrMsg_VoteStart_descriptor_ = file->message_type(36);
  static const int CCSUsrMsg_VoteStart_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, vote_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, disp_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, details_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, other_team_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, is_yes_no_vote_),
  };
  CCSUsrMsg_VoteStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoteStart_descriptor_,
      CCSUsrMsg_VoteStart::default_instance_,
      CCSUsrMsg_VoteStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoteStart));
  CCSUsrMsg_VotePass_descriptor_ = file->message_type(37);
  static const int CCSUsrMsg_VotePass_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, vote_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, disp_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, details_str_),
  };
  CCSUsrMsg_VotePass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VotePass_descriptor_,
      CCSUsrMsg_VotePass::default_instance_,
      CCSUsrMsg_VotePass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VotePass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VotePass));
  CCSUsrMsg_VoteFailed_descriptor_ = file->message_type(38);
  static const int CCSUsrMsg_VoteFailed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteFailed, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteFailed, reason_),
  };
  CCSUsrMsg_VoteFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoteFailed_descriptor_,
      CCSUsrMsg_VoteFailed::default_instance_,
      CCSUsrMsg_VoteFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoteFailed));
  CCSUsrMsg_VoteSetup_descriptor_ = file->message_type(39);
  static const int CCSUsrMsg_VoteSetup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteSetup, potential_issues_),
  };
  CCSUsrMsg_VoteSetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_VoteSetup_descriptor_,
      CCSUsrMsg_VoteSetup::default_instance_,
      CCSUsrMsg_VoteSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_VoteSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_VoteSetup));
  CCSUsrMsg_SendLastKillerDamageToClient_descriptor_ = file->message_type(40);
  static const int CCSUsrMsg_SendLastKillerDamageToClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, num_hits_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, damage_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, num_hits_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, damage_taken_),
  };
  CCSUsrMsg_SendLastKillerDamageToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_SendLastKillerDamageToClient_descriptor_,
      CCSUsrMsg_SendLastKillerDamageToClient::default_instance_,
      CCSUsrMsg_SendLastKillerDamageToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_SendLastKillerDamageToClient));
  CCSUsrMsg_ServerRankUpdate_descriptor_ = file->message_type(41);
  static const int CCSUsrMsg_ServerRankUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate, rank_update_),
  };
  CCSUsrMsg_ServerRankUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ServerRankUpdate_descriptor_,
      CCSUsrMsg_ServerRankUpdate::default_instance_,
      CCSUsrMsg_ServerRankUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ServerRankUpdate));
  CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_ = CCSUsrMsg_ServerRankUpdate_descriptor_->nested_type(0);
  static const int CCSUsrMsg_ServerRankUpdate_RankUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, num_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_change_),
  };
  CCSUsrMsg_ServerRankUpdate_RankUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_,
      CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_,
      CCSUsrMsg_ServerRankUpdate_RankUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ServerRankUpdate_RankUpdate));
  CCSUsrMsg_ItemPickup_descriptor_ = file->message_type(42);
  static const int CCSUsrMsg_ItemPickup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemPickup, item_),
  };
  CCSUsrMsg_ItemPickup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ItemPickup_descriptor_,
      CCSUsrMsg_ItemPickup::default_instance_,
      CCSUsrMsg_ItemPickup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemPickup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemPickup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ItemPickup));
  CCSUsrMsg_ShowMenu_descriptor_ = file->message_type(43);
  static const int CCSUsrMsg_ShowMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, bits_valid_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, display_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, menu_string_),
  };
  CCSUsrMsg_ShowMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ShowMenu_descriptor_,
      CCSUsrMsg_ShowMenu::default_instance_,
      CCSUsrMsg_ShowMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ShowMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ShowMenu));
  CCSUsrMsg_BarTime_descriptor_ = file->message_type(44);
  static const int CCSUsrMsg_BarTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_BarTime, time_),
  };
  CCSUsrMsg_BarTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_BarTime_descriptor_,
      CCSUsrMsg_BarTime::default_instance_,
      CCSUsrMsg_BarTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_BarTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_BarTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_BarTime));
  CCSUsrMsg_AmmoDenied_descriptor_ = file->message_type(45);
  static const int CCSUsrMsg_AmmoDenied_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AmmoDenied, ammoidx_),
  };
  CCSUsrMsg_AmmoDenied_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_AmmoDenied_descriptor_,
      CCSUsrMsg_AmmoDenied::default_instance_,
      CCSUsrMsg_AmmoDenied_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AmmoDenied, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_AmmoDenied, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_AmmoDenied));
  CCSUsrMsg_MarkAchievement_descriptor_ = file->message_type(46);
  static const int CCSUsrMsg_MarkAchievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MarkAchievement, achievement_),
  };
  CCSUsrMsg_MarkAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_MarkAchievement_descriptor_,
      CCSUsrMsg_MarkAchievement::default_instance_,
      CCSUsrMsg_MarkAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MarkAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MarkAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_MarkAchievement));
  CCSUsrMsg_MatchStatsUpdate_descriptor_ = file->message_type(47);
  static const int CCSUsrMsg_MatchStatsUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchStatsUpdate, update_),
  };
  CCSUsrMsg_MatchStatsUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_MatchStatsUpdate_descriptor_,
      CCSUsrMsg_MatchStatsUpdate::default_instance_,
      CCSUsrMsg_MatchStatsUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchStatsUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_MatchStatsUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_MatchStatsUpdate));
  CCSUsrMsg_ItemDrop_descriptor_ = file->message_type(48);
  static const int CCSUsrMsg_ItemDrop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemDrop, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemDrop, death_),
  };
  CCSUsrMsg_ItemDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ItemDrop_descriptor_,
      CCSUsrMsg_ItemDrop::default_instance_,
      CCSUsrMsg_ItemDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ItemDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ItemDrop));
  CCSUsrMsg_ResetHud_descriptor_ = file->message_type(49);
  static const int CCSUsrMsg_ResetHud_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ResetHud, reset_),
  };
  CCSUsrMsg_ResetHud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ResetHud_descriptor_,
      CCSUsrMsg_ResetHud::default_instance_,
      CCSUsrMsg_ResetHud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ResetHud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ResetHud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ResetHud));
  CCSUsrMsg_GameTitle_descriptor_ = file->message_type(50);
  static const int CCSUsrMsg_GameTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GameTitle, dummy_),
  };
  CCSUsrMsg_GameTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_GameTitle_descriptor_,
      CCSUsrMsg_GameTitle::default_instance_,
      CCSUsrMsg_GameTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GameTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_GameTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_GameTitle));
  CCSUsrMsg_RequestState_descriptor_ = file->message_type(51);
  static const int CCSUsrMsg_RequestState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestState, dummy_),
  };
  CCSUsrMsg_RequestState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_RequestState_descriptor_,
      CCSUsrMsg_RequestState::default_instance_,
      CCSUsrMsg_RequestState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_RequestState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_RequestState));
  CCSUsrMsg_StopSpectatorMode_descriptor_ = file->message_type(52);
  static const int CCSUsrMsg_StopSpectatorMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_StopSpectatorMode, dummy_),
  };
  CCSUsrMsg_StopSpectatorMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_StopSpectatorMode_descriptor_,
      CCSUsrMsg_StopSpectatorMode::default_instance_,
      CCSUsrMsg_StopSpectatorMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_StopSpectatorMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_StopSpectatorMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_StopSpectatorMode));
  CCSUsrMsg_DisconnectToLobby_descriptor_ = file->message_type(53);
  static const int CCSUsrMsg_DisconnectToLobby_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisconnectToLobby, dummy_),
  };
  CCSUsrMsg_DisconnectToLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_DisconnectToLobby_descriptor_,
      CCSUsrMsg_DisconnectToLobby::default_instance_,
      CCSUsrMsg_DisconnectToLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisconnectToLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_DisconnectToLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_DisconnectToLobby));
  CCSUsrMsg_WarmupHasEnded_descriptor_ = file->message_type(54);
  static const int CCSUsrMsg_WarmupHasEnded_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WarmupHasEnded, dummy_),
  };
  CCSUsrMsg_WarmupHasEnded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_WarmupHasEnded_descriptor_,
      CCSUsrMsg_WarmupHasEnded::default_instance_,
      CCSUsrMsg_WarmupHasEnded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WarmupHasEnded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_WarmupHasEnded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_WarmupHasEnded));
  CCSUsrMsg_ClientInfo_descriptor_ = file->message_type(55);
  static const int CCSUsrMsg_ClientInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ClientInfo, dummy_),
  };
  CCSUsrMsg_ClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ClientInfo_descriptor_,
      CCSUsrMsg_ClientInfo::default_instance_,
      CCSUsrMsg_ClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ClientInfo));
  CCSUsrMsg_ServerRankRevealAll_descriptor_ = file->message_type(56);
  static const int CCSUsrMsg_ServerRankRevealAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, dummy_),
  };
  CCSUsrMsg_ServerRankRevealAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSUsrMsg_ServerRankRevealAll_descriptor_,
      CCSUsrMsg_ServerRankRevealAll::default_instance_,
      CCSUsrMsg_ServerRankRevealAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSUsrMsg_ServerRankRevealAll));
  ECstrike15UserMessages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cstrike15_5fusermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VGUIMenu_descriptor_, &CCSUsrMsg_VGUIMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VGUIMenu_Subkey_descriptor_, &CCSUsrMsg_VGUIMenu_Subkey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Geiger_descriptor_, &CCSUsrMsg_Geiger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Train_descriptor_, &CCSUsrMsg_Train::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_HudText_descriptor_, &CCSUsrMsg_HudText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SayText_descriptor_, &CCSUsrMsg_SayText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SayText2_descriptor_, &CCSUsrMsg_SayText2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_TextMsg_descriptor_, &CCSUsrMsg_TextMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_HudMsg_descriptor_, &CCSUsrMsg_HudMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Shake_descriptor_, &CCSUsrMsg_Shake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Fade_descriptor_, &CCSUsrMsg_Fade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Rumble_descriptor_, &CCSUsrMsg_Rumble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CloseCaption_descriptor_, &CCSUsrMsg_CloseCaption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CloseCaptionDirect_descriptor_, &CCSUsrMsg_CloseCaptionDirect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SendAudio_descriptor_, &CCSUsrMsg_SendAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RawAudio_descriptor_, &CCSUsrMsg_RawAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoiceMask_descriptor_, &CCSUsrMsg_VoiceMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoiceMask_PlayerMask_descriptor_, &CCSUsrMsg_VoiceMask_PlayerMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_Damage_descriptor_, &CCSUsrMsg_Damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RadioText_descriptor_, &CCSUsrMsg_RadioText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_HintText_descriptor_, &CCSUsrMsg_HintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_KeyHintText_descriptor_, &CCSUsrMsg_KeyHintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_, &CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_, &CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ReloadEffect_descriptor_, &CCSUsrMsg_ReloadEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_AdjustMoney_descriptor_, &CCSUsrMsg_AdjustMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_KillCam_descriptor_, &CCSUsrMsg_KillCam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_DesiredTimescale_descriptor_, &CCSUsrMsg_DesiredTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CurrentTimescale_descriptor_, &CCSUsrMsg_CurrentTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_AchievementEvent_descriptor_, &CCSUsrMsg_AchievementEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_MatchEndConditions_descriptor_, &CCSUsrMsg_MatchEndConditions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_PlayerStatsUpdate_descriptor_, &CCSUsrMsg_PlayerStatsUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_, &CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_DisplayInventory_descriptor_, &CCSUsrMsg_DisplayInventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_XRankGet_descriptor_, &CCSUsrMsg_XRankGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_XRankUpd_descriptor_, &CCSUsrMsg_XRankUpd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SetPlayerEloDisplayBracket_descriptor_, &CCSUsrMsg_SetPlayerEloDisplayBracket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RequestEloBracketInfo_descriptor_, &CCSUsrMsg_RequestEloBracketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SetEloBracketInfo_descriptor_, &CCSUsrMsg_SetEloBracketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_CallVoteFailed_descriptor_, &CCSUsrMsg_CallVoteFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoteStart_descriptor_, &CCSUsrMsg_VoteStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VotePass_descriptor_, &CCSUsrMsg_VotePass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoteFailed_descriptor_, &CCSUsrMsg_VoteFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_VoteSetup_descriptor_, &CCSUsrMsg_VoteSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_SendLastKillerDamageToClient_descriptor_, &CCSUsrMsg_SendLastKillerDamageToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ServerRankUpdate_descriptor_, &CCSUsrMsg_ServerRankUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_, &CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ItemPickup_descriptor_, &CCSUsrMsg_ItemPickup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ShowMenu_descriptor_, &CCSUsrMsg_ShowMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_BarTime_descriptor_, &CCSUsrMsg_BarTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_AmmoDenied_descriptor_, &CCSUsrMsg_AmmoDenied::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_MarkAchievement_descriptor_, &CCSUsrMsg_MarkAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_MatchStatsUpdate_descriptor_, &CCSUsrMsg_MatchStatsUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ItemDrop_descriptor_, &CCSUsrMsg_ItemDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ResetHud_descriptor_, &CCSUsrMsg_ResetHud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_GameTitle_descriptor_, &CCSUsrMsg_GameTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_RequestState_descriptor_, &CCSUsrMsg_RequestState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_StopSpectatorMode_descriptor_, &CCSUsrMsg_StopSpectatorMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_DisconnectToLobby_descriptor_, &CCSUsrMsg_DisconnectToLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_WarmupHasEnded_descriptor_, &CCSUsrMsg_WarmupHasEnded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ClientInfo_descriptor_, &CCSUsrMsg_ClientInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSUsrMsg_ServerRankRevealAll_descriptor_, &CCSUsrMsg_ServerRankRevealAll::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cstrike15_5fusermessages_2eproto() {
  delete CCSUsrMsg_VGUIMenu::default_instance_;
  delete CCSUsrMsg_VGUIMenu_reflection_;
  delete CCSUsrMsg_VGUIMenu_Subkey::default_instance_;
  delete CCSUsrMsg_VGUIMenu_Subkey_reflection_;
  delete CCSUsrMsg_Geiger::default_instance_;
  delete CCSUsrMsg_Geiger_reflection_;
  delete CCSUsrMsg_Train::default_instance_;
  delete CCSUsrMsg_Train_reflection_;
  delete CCSUsrMsg_HudText::default_instance_;
  delete CCSUsrMsg_HudText_reflection_;
  delete CCSUsrMsg_SayText::default_instance_;
  delete CCSUsrMsg_SayText_reflection_;
  delete CCSUsrMsg_SayText2::default_instance_;
  delete CCSUsrMsg_SayText2_reflection_;
  delete CCSUsrMsg_TextMsg::default_instance_;
  delete CCSUsrMsg_TextMsg_reflection_;
  delete CCSUsrMsg_HudMsg::default_instance_;
  delete CCSUsrMsg_HudMsg_reflection_;
  delete CCSUsrMsg_Shake::default_instance_;
  delete CCSUsrMsg_Shake_reflection_;
  delete CCSUsrMsg_Fade::default_instance_;
  delete CCSUsrMsg_Fade_reflection_;
  delete CCSUsrMsg_Rumble::default_instance_;
  delete CCSUsrMsg_Rumble_reflection_;
  delete CCSUsrMsg_CloseCaption::default_instance_;
  delete CCSUsrMsg_CloseCaption_reflection_;
  delete CCSUsrMsg_CloseCaptionDirect::default_instance_;
  delete CCSUsrMsg_CloseCaptionDirect_reflection_;
  delete CCSUsrMsg_SendAudio::default_instance_;
  delete CCSUsrMsg_SendAudio_reflection_;
  delete CCSUsrMsg_RawAudio::default_instance_;
  delete CCSUsrMsg_RawAudio_reflection_;
  delete CCSUsrMsg_VoiceMask::default_instance_;
  delete CCSUsrMsg_VoiceMask_reflection_;
  delete CCSUsrMsg_VoiceMask_PlayerMask::default_instance_;
  delete CCSUsrMsg_VoiceMask_PlayerMask_reflection_;
  delete CCSUsrMsg_Damage::default_instance_;
  delete CCSUsrMsg_Damage_reflection_;
  delete CCSUsrMsg_RadioText::default_instance_;
  delete CCSUsrMsg_RadioText_reflection_;
  delete CCSUsrMsg_HintText::default_instance_;
  delete CCSUsrMsg_HintText_reflection_;
  delete CCSUsrMsg_KeyHintText::default_instance_;
  delete CCSUsrMsg_KeyHintText_reflection_;
  delete CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_;
  delete CCSUsrMsg_ProcessSpottedEntityUpdate_reflection_;
  delete CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_;
  delete CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_reflection_;
  delete CCSUsrMsg_ReloadEffect::default_instance_;
  delete CCSUsrMsg_ReloadEffect_reflection_;
  delete CCSUsrMsg_AdjustMoney::default_instance_;
  delete CCSUsrMsg_AdjustMoney_reflection_;
  delete CCSUsrMsg_KillCam::default_instance_;
  delete CCSUsrMsg_KillCam_reflection_;
  delete CCSUsrMsg_DesiredTimescale::default_instance_;
  delete CCSUsrMsg_DesiredTimescale_reflection_;
  delete CCSUsrMsg_CurrentTimescale::default_instance_;
  delete CCSUsrMsg_CurrentTimescale_reflection_;
  delete CCSUsrMsg_AchievementEvent::default_instance_;
  delete CCSUsrMsg_AchievementEvent_reflection_;
  delete CCSUsrMsg_MatchEndConditions::default_instance_;
  delete CCSUsrMsg_MatchEndConditions_reflection_;
  delete CCSUsrMsg_PlayerStatsUpdate::default_instance_;
  delete CCSUsrMsg_PlayerStatsUpdate_reflection_;
  delete CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_;
  delete CCSUsrMsg_PlayerStatsUpdate_Stat_reflection_;
  delete CCSUsrMsg_DisplayInventory::default_instance_;
  delete CCSUsrMsg_DisplayInventory_reflection_;
  delete CCSUsrMsg_XRankGet::default_instance_;
  delete CCSUsrMsg_XRankGet_reflection_;
  delete CCSUsrMsg_XRankUpd::default_instance_;
  delete CCSUsrMsg_XRankUpd_reflection_;
  delete CCSUsrMsg_SetPlayerEloDisplayBracket::default_instance_;
  delete CCSUsrMsg_SetPlayerEloDisplayBracket_reflection_;
  delete CCSUsrMsg_RequestEloBracketInfo::default_instance_;
  delete CCSUsrMsg_RequestEloBracketInfo_reflection_;
  delete CCSUsrMsg_SetEloBracketInfo::default_instance_;
  delete CCSUsrMsg_SetEloBracketInfo_reflection_;
  delete CCSUsrMsg_CallVoteFailed::default_instance_;
  delete CCSUsrMsg_CallVoteFailed_reflection_;
  delete CCSUsrMsg_VoteStart::default_instance_;
  delete CCSUsrMsg_VoteStart_reflection_;
  delete CCSUsrMsg_VotePass::default_instance_;
  delete CCSUsrMsg_VotePass_reflection_;
  delete CCSUsrMsg_VoteFailed::default_instance_;
  delete CCSUsrMsg_VoteFailed_reflection_;
  delete CCSUsrMsg_VoteSetup::default_instance_;
  delete CCSUsrMsg_VoteSetup_reflection_;
  delete CCSUsrMsg_SendLastKillerDamageToClient::default_instance_;
  delete CCSUsrMsg_SendLastKillerDamageToClient_reflection_;
  delete CCSUsrMsg_ServerRankUpdate::default_instance_;
  delete CCSUsrMsg_ServerRankUpdate_reflection_;
  delete CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_;
  delete CCSUsrMsg_ServerRankUpdate_RankUpdate_reflection_;
  delete CCSUsrMsg_ItemPickup::default_instance_;
  delete CCSUsrMsg_ItemPickup_reflection_;
  delete CCSUsrMsg_ShowMenu::default_instance_;
  delete CCSUsrMsg_ShowMenu_reflection_;
  delete CCSUsrMsg_BarTime::default_instance_;
  delete CCSUsrMsg_BarTime_reflection_;
  delete CCSUsrMsg_AmmoDenied::default_instance_;
  delete CCSUsrMsg_AmmoDenied_reflection_;
  delete CCSUsrMsg_MarkAchievement::default_instance_;
  delete CCSUsrMsg_MarkAchievement_reflection_;
  delete CCSUsrMsg_MatchStatsUpdate::default_instance_;
  delete CCSUsrMsg_MatchStatsUpdate_reflection_;
  delete CCSUsrMsg_ItemDrop::default_instance_;
  delete CCSUsrMsg_ItemDrop_reflection_;
  delete CCSUsrMsg_ResetHud::default_instance_;
  delete CCSUsrMsg_ResetHud_reflection_;
  delete CCSUsrMsg_GameTitle::default_instance_;
  delete CCSUsrMsg_GameTitle_reflection_;
  delete CCSUsrMsg_RequestState::default_instance_;
  delete CCSUsrMsg_RequestState_reflection_;
  delete CCSUsrMsg_StopSpectatorMode::default_instance_;
  delete CCSUsrMsg_StopSpectatorMode_reflection_;
  delete CCSUsrMsg_DisconnectToLobby::default_instance_;
  delete CCSUsrMsg_DisconnectToLobby_reflection_;
  delete CCSUsrMsg_WarmupHasEnded::default_instance_;
  delete CCSUsrMsg_WarmupHasEnded_reflection_;
  delete CCSUsrMsg_ClientInfo::default_instance_;
  delete CCSUsrMsg_ClientInfo_reflection_;
  delete CCSUsrMsg_ServerRankRevealAll::default_instance_;
  delete CCSUsrMsg_ServerRankRevealAll_reflection_;
}

void protobuf_AddDesc_cstrike15_5fusermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::protobuf_AddDesc_netmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034cstrike15_usermessages.proto\032 google/p"
    "rotobuf/descriptor.proto\032\021netmessages.pr"
    "oto\"\202\001\n\022CCSUsrMsg_VGUIMenu\022\014\n\004name\030\001 \001(\t"
    "\022\014\n\004show\030\002 \001(\010\022+\n\007subkeys\030\003 \003(\0132\032.CCSUsr"
    "Msg_VGUIMenu.Subkey\032#\n\006Subkey\022\014\n\004name\030\001 "
    "\001(\t\022\013\n\003str\030\002 \001(\t\"!\n\020CCSUsrMsg_Geiger\022\r\n\005"
    "range\030\001 \001(\005\" \n\017CCSUsrMsg_Train\022\r\n\005train\030"
    "\001 \001(\005\"!\n\021CCSUsrMsg_HudText\022\014\n\004text\030\001 \001(\t"
    "\"@\n\021CCSUsrMsg_SayText\022\017\n\007ent_idx\030\001 \001(\005\022\014"
    "\n\004text\030\002 \001(\t\022\014\n\004chat\030\003 \001(\010\"U\n\022CCSUsrMsg_"
    "SayText2\022\017\n\007ent_idx\030\001 \001(\005\022\014\n\004chat\030\002 \001(\010\022"
    "\020\n\010msg_name\030\003 \001(\t\022\016\n\006params\030\004 \003(\t\"4\n\021CCS"
    "UsrMsg_TextMsg\022\017\n\007msg_dst\030\001 \001(\005\022\016\n\006param"
    "s\030\003 \003(\t\"\340\001\n\020CCSUsrMsg_HudMsg\022\017\n\007channel\030"
    "\001 \001(\005\022\032\n\003pos\030\002 \001(\0132\r.CMsgVector2D\022\027\n\004clr"
    "1\030\003 \001(\0132\t.CMsgRGBA\022\027\n\004clr2\030\004 \001(\0132\t.CMsgR"
    "GBA\022\016\n\006effect\030\005 \001(\005\022\024\n\014fade_in_time\030\006 \001("
    "\002\022\025\n\rfade_out_time\030\007 \001(\002\022\021\n\thold_time\030\t "
    "\001(\002\022\017\n\007fx_time\030\n \001(\002\022\014\n\004text\030\013 \001(\t\"`\n\017CC"
    "SUsrMsg_Shake\022\017\n\007command\030\001 \001(\005\022\027\n\017local_"
    "amplitude\030\002 \001(\002\022\021\n\tfrequency\030\003 \001(\002\022\020\n\010du"
    "ration\030\004 \001(\002\"\\\n\016CCSUsrMsg_Fade\022\020\n\010durati"
    "on\030\001 \001(\005\022\021\n\thold_time\030\002 \001(\005\022\r\n\005flags\030\003 \001"
    "(\005\022\026\n\003clr\030\004 \001(\0132\t.CMsgRGBA\">\n\020CCSUsrMsg_"
    "Rumble\022\r\n\005index\030\001 \001(\005\022\014\n\004data\030\002 \001(\005\022\r\n\005f"
    "lags\030\003 \001(\005\"M\n\026CCSUsrMsg_CloseCaption\022\014\n\004"
    "hash\030\001 \001(\r\022\020\n\010duration\030\002 \001(\005\022\023\n\013from_pla"
    "yer\030\003 \001(\010\"S\n\034CCSUsrMsg_CloseCaptionDirec"
    "t\022\014\n\004hash\030\001 \001(\r\022\020\n\010duration\030\002 \001(\005\022\023\n\013fro"
    "m_player\030\003 \001(\010\"*\n\023CCSUsrMsg_SendAudio\022\023\n"
    "\013radio_sound\030\001 \001(\t\"]\n\022CCSUsrMsg_RawAudio"
    "\022\r\n\005pitch\030\001 \001(\005\022\016\n\006entidx\030\002 \001(\005\022\020\n\010durat"
    "ion\030\003 \001(\002\022\026\n\016voice_filename\030\004 \001(\t\"\241\001\n\023CC"
    "SUsrMsg_VoiceMask\0225\n\014player_masks\030\001 \003(\0132"
    "\037.CCSUsrMsg_VoiceMask.PlayerMask\022\031\n\021play"
    "er_mod_enable\030\002 \001(\010\0328\n\nPlayerMask\022\027\n\017gam"
    "e_rules_mask\030\001 \001(\005\022\021\n\tban_masks\030\002 \001(\005\"L\n"
    "\020CCSUsrMsg_Damage\022\016\n\006amount\030\001 \001(\005\022(\n\023inf"
    "lictor_world_pos\030\002 \001(\0132\013.CMsgVector\"X\n\023C"
    "CSUsrMsg_RadioText\022\017\n\007msg_dst\030\001 \001(\005\022\016\n\006c"
    "lient\030\002 \001(\005\022\020\n\010msg_name\030\003 \001(\t\022\016\n\006params\030"
    "\004 \003(\t\"\"\n\022CCSUsrMsg_HintText\022\014\n\004text\030\001 \001("
    "\t\"&\n\025CCSUsrMsg_KeyHintText\022\r\n\005hints\030\001 \003("
    "\t\"\326\002\n$CCSUsrMsg_ProcessSpottedEntityUpda"
    "te\022\022\n\nnew_update\030\001 \001(\010\022Q\n\016entity_updates"
    "\030\002 \003(\01329.CCSUsrMsg_ProcessSpottedEntityU"
    "pdate.SpottedEntityUpdate\032\306\001\n\023SpottedEnt"
    "ityUpdate\022\022\n\nentity_idx\030\001 \001(\005\022\020\n\010class_i"
    "d\030\002 \001(\005\022\020\n\010origin_x\030\003 \001(\005\022\020\n\010origin_y\030\004 "
    "\001(\005\022\020\n\010origin_z\030\005 \001(\005\022\017\n\007angle_y\030\006 \001(\005\022\017"
    "\n\007defuser\030\007 \001(\010\022\032\n\022player_has_defuser\030\010 "
    "\001(\010\022\025\n\rplayer_has_c4\030\t \001(\010\"(\n\026CCSUsrMsg_"
    "ReloadEffect\022\016\n\006entidx\030\001 \001(\005\"\'\n\025CCSUsrMs"
    "g_AdjustMoney\022\016\n\006amount\030\001 \001(\005\"R\n\021CCSUsrM"
    "sg_KillCam\022\020\n\010obs_mode\030\001 \001(\005\022\024\n\014first_ta"
    "rget\030\002 \001(\005\022\025\n\rsecond_target\030\003 \001(\005\"\213\001\n\032CC"
    "SUsrMsg_DesiredTimescale\022\031\n\021desired_time"
    "scale\030\001 \001(\002\022\035\n\025duration_realtime_sec\030\002 \001"
    "(\002\022\031\n\021interpolator_type\030\003 \001(\005\022\030\n\020start_b"
    "lend_time\030\004 \001(\002\"3\n\032CCSUsrMsg_CurrentTime"
    "scale\022\025\n\rcur_timescale\030\001 \001(\002\"Q\n\032CCSUsrMs"
    "g_AchievementEvent\022\023\n\013achievement\030\001 \001(\005\022"
    "\r\n\005count\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"r\n\034CCSUs"
    "rMsg_MatchEndConditions\022\021\n\tfraglimit\030\001 \001"
    "(\005\022\024\n\014mp_maxrounds\030\002 \001(\005\022\023\n\013mp_winlimit\030"
    "\003 \001(\005\022\024\n\014mp_timelimit\030\004 \001(\005\"\273\001\n\033CCSUsrMs"
    "g_PlayerStatsUpdate\022\017\n\007version\030\001 \001(\005\022\027\n\017"
    "official_server\030\002 \001(\005\0220\n\005stats\030\004 \003(\0132!.C"
    "CSUsrMsg_PlayerStatsUpdate.Stat\022\017\n\007user_"
    "id\030\005 \001(\005\022\013\n\003crc\030\006 \001(\005\032\"\n\004Stat\022\013\n\003idx\030\001 \001"
    "(\005\022\r\n\005delta\030\002 \001(\005\"-\n\032CCSUsrMsg_DisplayIn"
    "ventory\022\017\n\007display\030\001 \001(\010\":\n\022CCSUsrMsg_XR"
    "ankGet\022\020\n\010mode_idx\030\001 \001(\005\022\022\n\ncontroller\030\002"
    " \001(\005\"K\n\022CCSUsrMsg_XRankUpd\022\020\n\010mode_idx\030\001"
    " \001(\005\022\022\n\ncontroller\030\002 \001(\005\022\017\n\007ranking\030\003 \001("
    "\005\"7\n$CCSUsrMsg_SetPlayerEloDisplayBracke"
    "t\022\017\n\007bracket\030\001 \001(\005\"2\n\037CCSUsrMsg_RequestE"
    "loBracketInfo\022\017\n\007bracket\030\001 \001(\005\"}\n\033CCSUsr"
    "Msg_SetEloBracketInfo\022\021\n\tgame_mode\030\001 \001(\005"
    "\022\027\n\017display_bracket\030\002 \001(\005\022\024\n\014prev_bracke"
    "t\030\003 \001(\005\022\034\n\024num_games_in_bracket\030\004 \001(\005\"8\n"
    "\030CCSUsrMsg_CallVoteFailed\022\016\n\006reason\030\001 \001("
    "\005\022\014\n\004time\030\002 \001(\005\"\236\001\n\023CCSUsrMsg_VoteStart\022"
    "\014\n\004team\030\001 \001(\005\022\017\n\007ent_idx\030\002 \001(\005\022\021\n\tvote_t"
    "ype\030\003 \001(\005\022\020\n\010disp_str\030\004 \001(\t\022\023\n\013details_s"
    "tr\030\005 \001(\t\022\026\n\016other_team_str\030\006 \001(\t\022\026\n\016is_y"
    "es_no_vote\030\007 \001(\010\"\\\n\022CCSUsrMsg_VotePass\022\014"
    "\n\004team\030\001 \001(\005\022\021\n\tvote_type\030\002 \001(\005\022\020\n\010disp_"
    "str\030\003 \001(\t\022\023\n\013details_str\030\004 \001(\t\"4\n\024CCSUsr"
    "Msg_VoteFailed\022\014\n\004team\030\001 \001(\005\022\016\n\006reason\030\002"
    " \001(\005\"/\n\023CCSUsrMsg_VoteSetup\022\030\n\020potential"
    "_issues\030\001 \003(\t\"\204\001\n&CCSUsrMsg_SendLastKill"
    "erDamageToClient\022\026\n\016num_hits_given\030\001 \001(\005"
    "\022\024\n\014damage_given\030\002 \001(\005\022\026\n\016num_hits_taken"
    "\030\003 \001(\005\022\024\n\014damage_taken\030\004 \001(\005\"\306\001\n\032CCSUsrM"
    "sg_ServerRankUpdate\022;\n\013rank_update\030\001 \003(\013"
    "2&.CCSUsrMsg_ServerRankUpdate.RankUpdate"
    "\032k\n\nRankUpdate\022\022\n\naccount_id\030\001 \001(\005\022\020\n\010ra"
    "nk_old\030\002 \001(\005\022\020\n\010rank_new\030\003 \001(\005\022\020\n\010num_wi"
    "ns\030\004 \001(\005\022\023\n\013rank_change\030\005 \001(\002\"$\n\024CCSUsrM"
    "sg_ItemPickup\022\014\n\004item\030\001 \001(\t\"Y\n\022CCSUsrMsg"
    "_ShowMenu\022\030\n\020bits_valid_slots\030\001 \001(\005\022\024\n\014d"
    "isplay_time\030\002 \001(\005\022\023\n\013menu_string\030\003 \001(\t\"!"
    "\n\021CCSUsrMsg_BarTime\022\014\n\004time\030\001 \001(\t\"\'\n\024CCS"
    "UsrMsg_AmmoDenied\022\017\n\007ammoIdx\030\001 \001(\005\"0\n\031CC"
    "SUsrMsg_MarkAchievement\022\023\n\013achievement\030\001"
    " \001(\t\",\n\032CCSUsrMsg_MatchStatsUpdate\022\016\n\006up"
    "date\030\001 \001(\t\"3\n\022CCSUsrMsg_ItemDrop\022\016\n\006item"
    "id\030\001 \001(\003\022\r\n\005death\030\002 \001(\010\"#\n\022CCSUsrMsg_Res"
    "etHud\022\r\n\005reset\030\001 \001(\010\"$\n\023CCSUsrMsg_GameTi"
    "tle\022\r\n\005dummy\030\001 \001(\005\"\'\n\026CCSUsrMsg_RequestS"
    "tate\022\r\n\005dummy\030\001 \001(\005\",\n\033CCSUsrMsg_StopSpe"
    "ctatorMode\022\r\n\005dummy\030\001 \001(\005\",\n\033CCSUsrMsg_D"
    "isconnectToLobby\022\r\n\005dummy\030\001 \001(\005\")\n\030CCSUs"
    "rMsg_WarmupHasEnded\022\r\n\005dummy\030\001 \001(\005\"%\n\024CC"
    "SUsrMsg_ClientInfo\022\r\n\005dummy\030\001 \001(\005\".\n\035CCS"
    "UsrMsg_ServerRankRevealAll\022\r\n\005dummy\030\001 \001("
    "\005*\373\n\n\026ECstrike15UserMessages\022\022\n\016CS_UM_VG"
    "UIMenu\020\001\022\020\n\014CS_UM_Geiger\020\002\022\017\n\013CS_UM_Trai"
    "n\020\003\022\021\n\rCS_UM_HudText\020\004\022\021\n\rCS_UM_SayText\020"
    "\005\022\022\n\016CS_UM_SayText2\020\006\022\021\n\rCS_UM_TextMsg\020\007"
    "\022\020\n\014CS_UM_HudMsg\020\010\022\022\n\016CS_UM_ResetHud\020\t\022\023"
    "\n\017CS_UM_GameTitle\020\n\022\017\n\013CS_UM_Shake\020\014\022\016\n\n"
    "CS_UM_Fade\020\r\022\020\n\014CS_UM_Rumble\020\016\022\026\n\022CS_UM_"
    "CloseCaption\020\017\022\034\n\030CS_UM_CloseCaptionDire"
    "ct\020\020\022\023\n\017CS_UM_SendAudio\020\021\022\022\n\016CS_UM_RawAu"
    "dio\020\022\022\023\n\017CS_UM_VoiceMask\020\023\022\026\n\022CS_UM_Requ"
    "estState\020\024\022\020\n\014CS_UM_Damage\020\025\022\023\n\017CS_UM_Ra"
    "dioText\020\026\022\022\n\016CS_UM_HintText\020\027\022\025\n\021CS_UM_K"
    "eyHintText\020\030\022$\n CS_UM_ProcessSpottedEnti"
    "tyUpdate\020\031\022\026\n\022CS_UM_ReloadEffect\020\032\022\025\n\021CS"
    "_UM_AdjustMoney\020\033\022\031\n\025CS_UM_UpdateTeamMon"
    "ey\020\034\022\033\n\027CS_UM_StopSpectatorMode\020\035\022\021\n\rCS_"
    "UM_KillCam\020\036\022\032\n\026CS_UM_DesiredTimescale\020\037"
    "\022\032\n\026CS_UM_CurrentTimescale\020 \022\032\n\026CS_UM_Ac"
    "hievementEvent\020!\022\034\n\030CS_UM_MatchEndCondit"
    "ions\020\"\022\033\n\027CS_UM_DisconnectToLobby\020#\022\033\n\027C"
    "S_UM_PlayerStatsUpdate\020$\022\032\n\026CS_UM_Displa"
    "yInventory\020%\022\030\n\024CS_UM_WarmupHasEnded\020&\022\024"
    "\n\020CS_UM_ClientInfo\020\'\022\022\n\016CS_UM_XRankGet\020("
    "\022\022\n\016CS_UM_XRankUpd\020)\022$\n CS_UM_SetPlayerE"
    "loDisplayBracket\020*\022\037\n\033CS_UM_RequestEloBr"
    "acketInfo\020+\022\033\n\027CS_UM_SetEloBracketInfo\020,"
    "\022\030\n\024CS_UM_CallVoteFailed\020-\022\023\n\017CS_UM_Vote"
    "Start\020.\022\022\n\016CS_UM_VotePass\020/\022\024\n\020CS_UM_Vot"
    "eFailed\0200\022\023\n\017CS_UM_VoteSetup\0201\022\035\n\031CS_UM_"
    "ServerRankRevealAll\0202\022&\n\"CS_UM_SendLastK"
    "illerDamageToClient\0203\022\032\n\026CS_UM_ServerRan"
    "kUpdate\0204\022\024\n\020CS_UM_ItemPickup\0205\022\022\n\016CS_UM"
    "_ShowMenu\0206\022\021\n\rCS_UM_BarTime\0207\022\024\n\020CS_UM_"
    "AmmoDenied\0208\022\031\n\025CS_UM_MarkAchievement\0209\022"
    "\032\n\026CS_UM_MatchStatsUpdate\020:\022\022\n\016CS_UM_Ite"
    "mDrop\020;B\005H\001\200\001\000", 6094);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cstrike15_usermessages.proto", &protobuf_RegisterTypes);
  CCSUsrMsg_VGUIMenu::default_instance_ = new CCSUsrMsg_VGUIMenu();
  CCSUsrMsg_VGUIMenu_Subkey::default_instance_ = new CCSUsrMsg_VGUIMenu_Subkey();
  CCSUsrMsg_Geiger::default_instance_ = new CCSUsrMsg_Geiger();
  CCSUsrMsg_Train::default_instance_ = new CCSUsrMsg_Train();
  CCSUsrMsg_HudText::default_instance_ = new CCSUsrMsg_HudText();
  CCSUsrMsg_SayText::default_instance_ = new CCSUsrMsg_SayText();
  CCSUsrMsg_SayText2::default_instance_ = new CCSUsrMsg_SayText2();
  CCSUsrMsg_TextMsg::default_instance_ = new CCSUsrMsg_TextMsg();
  CCSUsrMsg_HudMsg::default_instance_ = new CCSUsrMsg_HudMsg();
  CCSUsrMsg_Shake::default_instance_ = new CCSUsrMsg_Shake();
  CCSUsrMsg_Fade::default_instance_ = new CCSUsrMsg_Fade();
  CCSUsrMsg_Rumble::default_instance_ = new CCSUsrMsg_Rumble();
  CCSUsrMsg_CloseCaption::default_instance_ = new CCSUsrMsg_CloseCaption();
  CCSUsrMsg_CloseCaptionDirect::default_instance_ = new CCSUsrMsg_CloseCaptionDirect();
  CCSUsrMsg_SendAudio::default_instance_ = new CCSUsrMsg_SendAudio();
  CCSUsrMsg_RawAudio::default_instance_ = new CCSUsrMsg_RawAudio();
  CCSUsrMsg_VoiceMask::default_instance_ = new CCSUsrMsg_VoiceMask();
  CCSUsrMsg_VoiceMask_PlayerMask::default_instance_ = new CCSUsrMsg_VoiceMask_PlayerMask();
  CCSUsrMsg_Damage::default_instance_ = new CCSUsrMsg_Damage();
  CCSUsrMsg_RadioText::default_instance_ = new CCSUsrMsg_RadioText();
  CCSUsrMsg_HintText::default_instance_ = new CCSUsrMsg_HintText();
  CCSUsrMsg_KeyHintText::default_instance_ = new CCSUsrMsg_KeyHintText();
  CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_ = new CCSUsrMsg_ProcessSpottedEntityUpdate();
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_ = new CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate();
  CCSUsrMsg_ReloadEffect::default_instance_ = new CCSUsrMsg_ReloadEffect();
  CCSUsrMsg_AdjustMoney::default_instance_ = new CCSUsrMsg_AdjustMoney();
  CCSUsrMsg_KillCam::default_instance_ = new CCSUsrMsg_KillCam();
  CCSUsrMsg_DesiredTimescale::default_instance_ = new CCSUsrMsg_DesiredTimescale();
  CCSUsrMsg_CurrentTimescale::default_instance_ = new CCSUsrMsg_CurrentTimescale();
  CCSUsrMsg_AchievementEvent::default_instance_ = new CCSUsrMsg_AchievementEvent();
  CCSUsrMsg_MatchEndConditions::default_instance_ = new CCSUsrMsg_MatchEndConditions();
  CCSUsrMsg_PlayerStatsUpdate::default_instance_ = new CCSUsrMsg_PlayerStatsUpdate();
  CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_ = new CCSUsrMsg_PlayerStatsUpdate_Stat();
  CCSUsrMsg_DisplayInventory::default_instance_ = new CCSUsrMsg_DisplayInventory();
  CCSUsrMsg_XRankGet::default_instance_ = new CCSUsrMsg_XRankGet();
  CCSUsrMsg_XRankUpd::default_instance_ = new CCSUsrMsg_XRankUpd();
  CCSUsrMsg_SetPlayerEloDisplayBracket::default_instance_ = new CCSUsrMsg_SetPlayerEloDisplayBracket();
  CCSUsrMsg_RequestEloBracketInfo::default_instance_ = new CCSUsrMsg_RequestEloBracketInfo();
  CCSUsrMsg_SetEloBracketInfo::default_instance_ = new CCSUsrMsg_SetEloBracketInfo();
  CCSUsrMsg_CallVoteFailed::default_instance_ = new CCSUsrMsg_CallVoteFailed();
  CCSUsrMsg_VoteStart::default_instance_ = new CCSUsrMsg_VoteStart();
  CCSUsrMsg_VotePass::default_instance_ = new CCSUsrMsg_VotePass();
  CCSUsrMsg_VoteFailed::default_instance_ = new CCSUsrMsg_VoteFailed();
  CCSUsrMsg_VoteSetup::default_instance_ = new CCSUsrMsg_VoteSetup();
  CCSUsrMsg_SendLastKillerDamageToClient::default_instance_ = new CCSUsrMsg_SendLastKillerDamageToClient();
  CCSUsrMsg_ServerRankUpdate::default_instance_ = new CCSUsrMsg_ServerRankUpdate();
  CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_ = new CCSUsrMsg_ServerRankUpdate_RankUpdate();
  CCSUsrMsg_ItemPickup::default_instance_ = new CCSUsrMsg_ItemPickup();
  CCSUsrMsg_ShowMenu::default_instance_ = new CCSUsrMsg_ShowMenu();
  CCSUsrMsg_BarTime::default_instance_ = new CCSUsrMsg_BarTime();
  CCSUsrMsg_AmmoDenied::default_instance_ = new CCSUsrMsg_AmmoDenied();
  CCSUsrMsg_MarkAchievement::default_instance_ = new CCSUsrMsg_MarkAchievement();
  CCSUsrMsg_MatchStatsUpdate::default_instance_ = new CCSUsrMsg_MatchStatsUpdate();
  CCSUsrMsg_ItemDrop::default_instance_ = new CCSUsrMsg_ItemDrop();
  CCSUsrMsg_ResetHud::default_instance_ = new CCSUsrMsg_ResetHud();
  CCSUsrMsg_GameTitle::default_instance_ = new CCSUsrMsg_GameTitle();
  CCSUsrMsg_RequestState::default_instance_ = new CCSUsrMsg_RequestState();
  CCSUsrMsg_StopSpectatorMode::default_instance_ = new CCSUsrMsg_StopSpectatorMode();
  CCSUsrMsg_DisconnectToLobby::default_instance_ = new CCSUsrMsg_DisconnectToLobby();
  CCSUsrMsg_WarmupHasEnded::default_instance_ = new CCSUsrMsg_WarmupHasEnded();
  CCSUsrMsg_ClientInfo::default_instance_ = new CCSUsrMsg_ClientInfo();
  CCSUsrMsg_ServerRankRevealAll::default_instance_ = new CCSUsrMsg_ServerRankRevealAll();
  CCSUsrMsg_VGUIMenu::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VGUIMenu_Subkey::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Geiger::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Train::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_HudText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SayText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SayText2::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_TextMsg::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_HudMsg::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Shake::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Fade::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Rumble::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CloseCaption::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CloseCaptionDirect::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SendAudio::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RawAudio::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoiceMask::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoiceMask_PlayerMask::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_Damage::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RadioText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_HintText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_KeyHintText::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ReloadEffect::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_AdjustMoney::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_KillCam::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_DesiredTimescale::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CurrentTimescale::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_AchievementEvent::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_MatchEndConditions::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_PlayerStatsUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_DisplayInventory::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_XRankGet::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_XRankUpd::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SetPlayerEloDisplayBracket::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RequestEloBracketInfo::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SetEloBracketInfo::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_CallVoteFailed::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoteStart::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VotePass::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoteFailed::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_VoteSetup::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_SendLastKillerDamageToClient::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ServerRankUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ItemPickup::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ShowMenu::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_BarTime::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_AmmoDenied::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_MarkAchievement::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_MatchStatsUpdate::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ItemDrop::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ResetHud::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_GameTitle::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_RequestState::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_StopSpectatorMode::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_DisconnectToLobby::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_WarmupHasEnded::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ClientInfo::default_instance_->InitAsDefaultInstance();
  CCSUsrMsg_ServerRankRevealAll::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cstrike15_5fusermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cstrike15_5fusermessages_2eproto {
  StaticDescriptorInitializer_cstrike15_5fusermessages_2eproto() {
    protobuf_AddDesc_cstrike15_5fusermessages_2eproto();
  }
} static_descriptor_initializer_cstrike15_5fusermessages_2eproto_;

const ::google::protobuf::EnumDescriptor* ECstrike15UserMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECstrike15UserMessages_descriptor_;
}
bool ECstrike15UserMessages_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string CCSUsrMsg_VGUIMenu_Subkey::_default_name_;
const ::std::string CCSUsrMsg_VGUIMenu_Subkey::_default_str_;
#ifndef _MSC_VER
const int CCSUsrMsg_VGUIMenu_Subkey::kNameFieldNumber;
const int CCSUsrMsg_VGUIMenu_Subkey::kStrFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VGUIMenu_Subkey::CCSUsrMsg_VGUIMenu_Subkey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VGUIMenu_Subkey::InitAsDefaultInstance() {
}

CCSUsrMsg_VGUIMenu_Subkey::CCSUsrMsg_VGUIMenu_Subkey(const CCSUsrMsg_VGUIMenu_Subkey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VGUIMenu_Subkey::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  str_ = const_cast< ::std::string*>(&_default_str_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VGUIMenu_Subkey::~CCSUsrMsg_VGUIMenu_Subkey() {
  SharedDtor();
}

void CCSUsrMsg_VGUIMenu_Subkey::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (str_ != &_default_str_) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VGUIMenu_Subkey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VGUIMenu_Subkey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VGUIMenu_Subkey_descriptor_;
}

const CCSUsrMsg_VGUIMenu_Subkey& CCSUsrMsg_VGUIMenu_Subkey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_VGUIMenu_Subkey* CCSUsrMsg_VGUIMenu_Subkey::default_instance_ = NULL;

CCSUsrMsg_VGUIMenu_Subkey* CCSUsrMsg_VGUIMenu_Subkey::New() const {
  return new CCSUsrMsg_VGUIMenu_Subkey;
}

void CCSUsrMsg_VGUIMenu_Subkey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (str_ != &_default_str_) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VGUIMenu_Subkey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VGUIMenu_Subkey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string str = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VGUIMenu_Subkey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string str = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VGUIMenu_Subkey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VGUIMenu_Subkey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VGUIMenu_Subkey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VGUIMenu_Subkey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VGUIMenu_Subkey::MergeFrom(const CCSUsrMsg_VGUIMenu_Subkey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VGUIMenu_Subkey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VGUIMenu_Subkey::CopyFrom(const CCSUsrMsg_VGUIMenu_Subkey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VGUIMenu_Subkey::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_VGUIMenu_Subkey::Swap(CCSUsrMsg_VGUIMenu_Subkey* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VGUIMenu_Subkey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VGUIMenu_Subkey_descriptor_;
  metadata.reflection = CCSUsrMsg_VGUIMenu_Subkey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string CCSUsrMsg_VGUIMenu::_default_name_;
#ifndef _MSC_VER
const int CCSUsrMsg_VGUIMenu::kNameFieldNumber;
const int CCSUsrMsg_VGUIMenu::kShowFieldNumber;
const int CCSUsrMsg_VGUIMenu::kSubkeysFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VGUIMenu::InitAsDefaultInstance() {
}

CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu(const CCSUsrMsg_VGUIMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VGUIMenu::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VGUIMenu::~CCSUsrMsg_VGUIMenu() {
  SharedDtor();
}

void CCSUsrMsg_VGUIMenu::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VGUIMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VGUIMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VGUIMenu_descriptor_;
}

const CCSUsrMsg_VGUIMenu& CCSUsrMsg_VGUIMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_VGUIMenu* CCSUsrMsg_VGUIMenu::default_instance_ = NULL;

CCSUsrMsg_VGUIMenu* CCSUsrMsg_VGUIMenu::New() const {
  return new CCSUsrMsg_VGUIMenu;
}

void CCSUsrMsg_VGUIMenu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    show_ = false;
  }
  subkeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VGUIMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }
      
      // optional bool show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subkeys;
        break;
      }
      
      // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subkeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subkeys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VGUIMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional bool show = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }
  
  // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
  for (int i = 0; i < this->subkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subkeys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VGUIMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional bool show = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }
  
  // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
  for (int i = 0; i < this->subkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subkeys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VGUIMenu::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool show = 2;
    if (has_show()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
  total_size += 1 * this->subkeys_size();
  for (int i = 0; i < this->subkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subkeys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VGUIMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VGUIMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VGUIMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VGUIMenu::MergeFrom(const CCSUsrMsg_VGUIMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  subkeys_.MergeFrom(from.subkeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VGUIMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VGUIMenu::CopyFrom(const CCSUsrMsg_VGUIMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VGUIMenu::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_VGUIMenu::Swap(CCSUsrMsg_VGUIMenu* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(show_, other->show_);
    subkeys_.Swap(&other->subkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VGUIMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VGUIMenu_descriptor_;
  metadata.reflection = CCSUsrMsg_VGUIMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Geiger::kRangeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Geiger::CCSUsrMsg_Geiger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Geiger::InitAsDefaultInstance() {
}

CCSUsrMsg_Geiger::CCSUsrMsg_Geiger(const CCSUsrMsg_Geiger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Geiger::SharedCtor() {
  _cached_size_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Geiger::~CCSUsrMsg_Geiger() {
  SharedDtor();
}

void CCSUsrMsg_Geiger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_Geiger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Geiger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Geiger_descriptor_;
}

const CCSUsrMsg_Geiger& CCSUsrMsg_Geiger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_Geiger* CCSUsrMsg_Geiger::default_instance_ = NULL;

CCSUsrMsg_Geiger* CCSUsrMsg_Geiger::New() const {
  return new CCSUsrMsg_Geiger;
}

void CCSUsrMsg_Geiger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Geiger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Geiger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 range = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Geiger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 range = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Geiger::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Geiger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Geiger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Geiger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Geiger::MergeFrom(const CCSUsrMsg_Geiger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Geiger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Geiger::CopyFrom(const CCSUsrMsg_Geiger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Geiger::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_Geiger::Swap(CCSUsrMsg_Geiger* other) {
  if (other != this) {
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Geiger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Geiger_descriptor_;
  metadata.reflection = CCSUsrMsg_Geiger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Train::kTrainFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Train::CCSUsrMsg_Train()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Train::InitAsDefaultInstance() {
}

CCSUsrMsg_Train::CCSUsrMsg_Train(const CCSUsrMsg_Train& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Train::SharedCtor() {
  _cached_size_ = 0;
  train_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Train::~CCSUsrMsg_Train() {
  SharedDtor();
}

void CCSUsrMsg_Train::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_Train::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Train::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Train_descriptor_;
}

const CCSUsrMsg_Train& CCSUsrMsg_Train::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_Train* CCSUsrMsg_Train::default_instance_ = NULL;

CCSUsrMsg_Train* CCSUsrMsg_Train::New() const {
  return new CCSUsrMsg_Train;
}

void CCSUsrMsg_Train::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    train_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Train::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 train = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Train::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 train = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->train(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Train::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 train = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->train(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Train::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 train = 1;
    if (has_train()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Train::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Train* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Train*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Train::MergeFrom(const CCSUsrMsg_Train& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_train(from.train());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Train::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Train::CopyFrom(const CCSUsrMsg_Train& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Train::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_Train::Swap(CCSUsrMsg_Train* other) {
  if (other != this) {
    std::swap(train_, other->train_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Train::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Train_descriptor_;
  metadata.reflection = CCSUsrMsg_Train_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_HudText::_default_text_;
#ifndef _MSC_VER
const int CCSUsrMsg_HudText::kTextFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_HudText::CCSUsrMsg_HudText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_HudText::InitAsDefaultInstance() {
}

CCSUsrMsg_HudText::CCSUsrMsg_HudText(const CCSUsrMsg_HudText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_HudText::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_HudText::~CCSUsrMsg_HudText() {
  SharedDtor();
}

void CCSUsrMsg_HudText::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_HudText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_HudText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_HudText_descriptor_;
}

const CCSUsrMsg_HudText& CCSUsrMsg_HudText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_HudText* CCSUsrMsg_HudText::default_instance_ = NULL;

CCSUsrMsg_HudText* CCSUsrMsg_HudText::New() const {
  return new CCSUsrMsg_HudText;
}

void CCSUsrMsg_HudText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_HudText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_HudText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_HudText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_HudText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_HudText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_HudText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_HudText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_HudText::MergeFrom(const CCSUsrMsg_HudText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_HudText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_HudText::CopyFrom(const CCSUsrMsg_HudText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HudText::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_HudText::Swap(CCSUsrMsg_HudText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_HudText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_HudText_descriptor_;
  metadata.reflection = CCSUsrMsg_HudText_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_SayText::_default_text_;
#ifndef _MSC_VER
const int CCSUsrMsg_SayText::kEntIdxFieldNumber;
const int CCSUsrMsg_SayText::kTextFieldNumber;
const int CCSUsrMsg_SayText::kChatFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SayText::CCSUsrMsg_SayText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SayText::InitAsDefaultInstance() {
}

CCSUsrMsg_SayText::CCSUsrMsg_SayText(const CCSUsrMsg_SayText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SayText::SharedCtor() {
  _cached_size_ = 0;
  ent_idx_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  chat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SayText::~CCSUsrMsg_SayText() {
  SharedDtor();
}

void CCSUsrMsg_SayText::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SayText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SayText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SayText_descriptor_;
}

const CCSUsrMsg_SayText& CCSUsrMsg_SayText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_SayText* CCSUsrMsg_SayText::default_instance_ = NULL;

CCSUsrMsg_SayText* CCSUsrMsg_SayText::New() const {
  return new CCSUsrMsg_SayText;
}

void CCSUsrMsg_SayText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ent_idx_ = 0;
    if (_has_bit(1)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
    chat_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SayText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat;
        break;
      }
      
      // optional bool chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SayText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ent_idx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_idx(), output);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  // optional bool chat = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->chat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SayText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ent_idx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_idx(), target);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  // optional bool chat = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->chat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SayText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ent_idx = 1;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional bool chat = 3;
    if (has_chat()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SayText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SayText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SayText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SayText::MergeFrom(const CCSUsrMsg_SayText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ent_idx(from.ent_idx());
    }
    if (from._has_bit(1)) {
      set_text(from.text());
    }
    if (from._has_bit(2)) {
      set_chat(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SayText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SayText::CopyFrom(const CCSUsrMsg_SayText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SayText::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_SayText::Swap(CCSUsrMsg_SayText* other) {
  if (other != this) {
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(text_, other->text_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SayText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SayText_descriptor_;
  metadata.reflection = CCSUsrMsg_SayText_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_SayText2::_default_msg_name_;
#ifndef _MSC_VER
const int CCSUsrMsg_SayText2::kEntIdxFieldNumber;
const int CCSUsrMsg_SayText2::kChatFieldNumber;
const int CCSUsrMsg_SayText2::kMsgNameFieldNumber;
const int CCSUsrMsg_SayText2::kParamsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SayText2::CCSUsrMsg_SayText2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SayText2::InitAsDefaultInstance() {
}

CCSUsrMsg_SayText2::CCSUsrMsg_SayText2(const CCSUsrMsg_SayText2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SayText2::SharedCtor() {
  _cached_size_ = 0;
  ent_idx_ = 0;
  chat_ = false;
  msg_name_ = const_cast< ::std::string*>(&_default_msg_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SayText2::~CCSUsrMsg_SayText2() {
  SharedDtor();
}

void CCSUsrMsg_SayText2::SharedDtor() {
  if (msg_name_ != &_default_msg_name_) {
    delete msg_name_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SayText2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SayText2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SayText2_descriptor_;
}

const CCSUsrMsg_SayText2& CCSUsrMsg_SayText2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_SayText2* CCSUsrMsg_SayText2::default_instance_ = NULL;

CCSUsrMsg_SayText2* CCSUsrMsg_SayText2::New() const {
  return new CCSUsrMsg_SayText2;
}

void CCSUsrMsg_SayText2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ent_idx_ = 0;
    chat_ = false;
    if (_has_bit(2)) {
      if (msg_name_ != &_default_msg_name_) {
        msg_name_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SayText2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat;
        break;
      }
      
      // optional bool chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_name;
        break;
      }
      
      // optional string msg_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }
      
      // repeated string params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(0).data(), this->params(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SayText2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ent_idx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_idx(), output);
  }
  
  // optional bool chat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat(), output);
  }
  
  // optional string msg_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_name(), output);
  }
  
  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->params(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SayText2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ent_idx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_idx(), target);
  }
  
  // optional bool chat = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat(), target);
  }
  
  // optional string msg_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_name(), target);
  }
  
  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->params(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SayText2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ent_idx = 1;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }
    
    // optional bool chat = 2;
    if (has_chat()) {
      total_size += 1 + 1;
    }
    
    // optional string msg_name = 3;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_name());
    }
    
  }
  // repeated string params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SayText2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SayText2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SayText2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SayText2::MergeFrom(const CCSUsrMsg_SayText2& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ent_idx(from.ent_idx());
    }
    if (from._has_bit(1)) {
      set_chat(from.chat());
    }
    if (from._has_bit(2)) {
      set_msg_name(from.msg_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SayText2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SayText2::CopyFrom(const CCSUsrMsg_SayText2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SayText2::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_SayText2::Swap(CCSUsrMsg_SayText2* other) {
  if (other != this) {
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(chat_, other->chat_);
    std::swap(msg_name_, other->msg_name_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SayText2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SayText2_descriptor_;
  metadata.reflection = CCSUsrMsg_SayText2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_TextMsg::kMsgDstFieldNumber;
const int CCSUsrMsg_TextMsg::kParamsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_TextMsg::CCSUsrMsg_TextMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_TextMsg::InitAsDefaultInstance() {
}

CCSUsrMsg_TextMsg::CCSUsrMsg_TextMsg(const CCSUsrMsg_TextMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_TextMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_dst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_TextMsg::~CCSUsrMsg_TextMsg() {
  SharedDtor();
}

void CCSUsrMsg_TextMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_TextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_TextMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_TextMsg_descriptor_;
}

const CCSUsrMsg_TextMsg& CCSUsrMsg_TextMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_TextMsg* CCSUsrMsg_TextMsg::default_instance_ = NULL;

CCSUsrMsg_TextMsg* CCSUsrMsg_TextMsg::New() const {
  return new CCSUsrMsg_TextMsg;
}

void CCSUsrMsg_TextMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_dst_ = 0;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_TextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_dst_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }
      
      // repeated string params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(0).data(), this->params(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_TextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msg_dst = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_dst(), output);
  }
  
  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->params(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_TextMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msg_dst = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_dst(), target);
  }
  
  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->params(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_TextMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_dst = 1;
    if (has_msg_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_dst());
    }
    
  }
  // repeated string params = 3;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_TextMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_TextMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_TextMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_TextMsg::MergeFrom(const CCSUsrMsg_TextMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg_dst(from.msg_dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_TextMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_TextMsg::CopyFrom(const CCSUsrMsg_TextMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_TextMsg::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_TextMsg::Swap(CCSUsrMsg_TextMsg* other) {
  if (other != this) {
    std::swap(msg_dst_, other->msg_dst_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_TextMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_TextMsg_descriptor_;
  metadata.reflection = CCSUsrMsg_TextMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_HudMsg::_default_text_;
#ifndef _MSC_VER
const int CCSUsrMsg_HudMsg::kChannelFieldNumber;
const int CCSUsrMsg_HudMsg::kPosFieldNumber;
const int CCSUsrMsg_HudMsg::kClr1FieldNumber;
const int CCSUsrMsg_HudMsg::kClr2FieldNumber;
const int CCSUsrMsg_HudMsg::kEffectFieldNumber;
const int CCSUsrMsg_HudMsg::kFadeInTimeFieldNumber;
const int CCSUsrMsg_HudMsg::kFadeOutTimeFieldNumber;
const int CCSUsrMsg_HudMsg::kHoldTimeFieldNumber;
const int CCSUsrMsg_HudMsg::kFxTimeFieldNumber;
const int CCSUsrMsg_HudMsg::kTextFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_HudMsg::InitAsDefaultInstance() {
  pos_ = const_cast< ::CMsgVector2D*>(&::CMsgVector2D::default_instance());
  clr1_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
  clr2_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
}

CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg(const CCSUsrMsg_HudMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_HudMsg::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  pos_ = NULL;
  clr1_ = NULL;
  clr2_ = NULL;
  effect_ = 0;
  fade_in_time_ = 0;
  fade_out_time_ = 0;
  hold_time_ = 0;
  fx_time_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_HudMsg::~CCSUsrMsg_HudMsg() {
  SharedDtor();
}

void CCSUsrMsg_HudMsg::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete clr1_;
    delete clr2_;
  }
}

void CCSUsrMsg_HudMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_HudMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_HudMsg_descriptor_;
}

const CCSUsrMsg_HudMsg& CCSUsrMsg_HudMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_HudMsg* CCSUsrMsg_HudMsg::default_instance_ = NULL;

CCSUsrMsg_HudMsg* CCSUsrMsg_HudMsg::New() const {
  return new CCSUsrMsg_HudMsg;
}

void CCSUsrMsg_HudMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    if (_has_bit(1)) {
      if (pos_ != NULL) pos_->::CMsgVector2D::Clear();
    }
    if (_has_bit(2)) {
      if (clr1_ != NULL) clr1_->::CMsgRGBA::Clear();
    }
    if (_has_bit(3)) {
      if (clr2_ != NULL) clr2_->::CMsgRGBA::Clear();
    }
    effect_ = 0;
    fade_in_time_ = 0;
    fade_out_time_ = 0;
    hold_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fx_time_ = 0;
    if (_has_bit(9)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_HudMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // optional .CMsgVector2D pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clr1;
        break;
      }
      
      // optional .CMsgRGBA clr1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clr2;
        break;
      }
      
      // optional .CMsgRGBA clr2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }
      
      // optional int32 effect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fade_in_time;
        break;
      }
      
      // optional float fade_in_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_time_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fade_out_time;
        break;
      }
      
      // optional float fade_out_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_out_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_time_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_hold_time;
        break;
      }
      
      // optional float hold_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hold_time_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_fx_time;
        break;
      }
      
      // optional float fx_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fx_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_time_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_text;
        break;
      }
      
      // optional string text = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_HudMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }
  
  // optional .CMsgVector2D pos = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  // optional .CMsgRGBA clr1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clr1(), output);
  }
  
  // optional .CMsgRGBA clr2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clr2(), output);
  }
  
  // optional int32 effect = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->effect(), output);
  }
  
  // optional float fade_in_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fade_in_time(), output);
  }
  
  // optional float fade_out_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fade_out_time(), output);
  }
  
  // optional float hold_time = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hold_time(), output);
  }
  
  // optional float fx_time = 10;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fx_time(), output);
  }
  
  // optional string text = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_HudMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }
  
  // optional .CMsgVector2D pos = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  // optional .CMsgRGBA clr1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clr1(), target);
  }
  
  // optional .CMsgRGBA clr2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->clr2(), target);
  }
  
  // optional int32 effect = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->effect(), target);
  }
  
  // optional float fade_in_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fade_in_time(), target);
  }
  
  // optional float fade_out_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fade_out_time(), target);
  }
  
  // optional float hold_time = 9;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hold_time(), target);
  }
  
  // optional float fx_time = 10;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fx_time(), target);
  }
  
  // optional string text = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_HudMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }
    
    // optional .CMsgVector2D pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // optional .CMsgRGBA clr1 = 3;
    if (has_clr1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr1());
    }
    
    // optional .CMsgRGBA clr2 = 4;
    if (has_clr2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr2());
    }
    
    // optional int32 effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }
    
    // optional float fade_in_time = 6;
    if (has_fade_in_time()) {
      total_size += 1 + 4;
    }
    
    // optional float fade_out_time = 7;
    if (has_fade_out_time()) {
      total_size += 1 + 4;
    }
    
    // optional float hold_time = 9;
    if (has_hold_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fx_time = 10;
    if (has_fx_time()) {
      total_size += 1 + 4;
    }
    
    // optional string text = 11;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_HudMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_HudMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_HudMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_HudMsg::MergeFrom(const CCSUsrMsg_HudMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_channel(from.channel());
    }
    if (from._has_bit(1)) {
      mutable_pos()->::CMsgVector2D::MergeFrom(from.pos());
    }
    if (from._has_bit(2)) {
      mutable_clr1()->::CMsgRGBA::MergeFrom(from.clr1());
    }
    if (from._has_bit(3)) {
      mutable_clr2()->::CMsgRGBA::MergeFrom(from.clr2());
    }
    if (from._has_bit(4)) {
      set_effect(from.effect());
    }
    if (from._has_bit(5)) {
      set_fade_in_time(from.fade_in_time());
    }
    if (from._has_bit(6)) {
      set_fade_out_time(from.fade_out_time());
    }
    if (from._has_bit(7)) {
      set_hold_time(from.hold_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_fx_time(from.fx_time());
    }
    if (from._has_bit(9)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_HudMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_HudMsg::CopyFrom(const CCSUsrMsg_HudMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HudMsg::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_HudMsg::Swap(CCSUsrMsg_HudMsg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(pos_, other->pos_);
    std::swap(clr1_, other->clr1_);
    std::swap(clr2_, other->clr2_);
    std::swap(effect_, other->effect_);
    std::swap(fade_in_time_, other->fade_in_time_);
    std::swap(fade_out_time_, other->fade_out_time_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(fx_time_, other->fx_time_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_HudMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_HudMsg_descriptor_;
  metadata.reflection = CCSUsrMsg_HudMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Shake::kCommandFieldNumber;
const int CCSUsrMsg_Shake::kLocalAmplitudeFieldNumber;
const int CCSUsrMsg_Shake::kFrequencyFieldNumber;
const int CCSUsrMsg_Shake::kDurationFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Shake::CCSUsrMsg_Shake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Shake::InitAsDefaultInstance() {
}

CCSUsrMsg_Shake::CCSUsrMsg_Shake(const CCSUsrMsg_Shake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Shake::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  local_amplitude_ = 0;
  frequency_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Shake::~CCSUsrMsg_Shake() {
  SharedDtor();
}

void CCSUsrMsg_Shake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_Shake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Shake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Shake_descriptor_;
}

const CCSUsrMsg_Shake& CCSUsrMsg_Shake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_Shake* CCSUsrMsg_Shake::default_instance_ = NULL;

CCSUsrMsg_Shake* CCSUsrMsg_Shake::New() const {
  return new CCSUsrMsg_Shake;
}

void CCSUsrMsg_Shake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    local_amplitude_ = 0;
    frequency_ = 0;
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Shake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_local_amplitude;
        break;
      }
      
      // optional float local_amplitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_local_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_amplitude_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }
      
      // optional float frequency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }
      
      // optional float duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Shake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }
  
  // optional float local_amplitude = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->local_amplitude(), output);
  }
  
  // optional float frequency = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }
  
  // optional float duration = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Shake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 command = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }
  
  // optional float local_amplitude = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->local_amplitude(), target);
  }
  
  // optional float frequency = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }
  
  // optional float duration = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Shake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }
    
    // optional float local_amplitude = 2;
    if (has_local_amplitude()) {
      total_size += 1 + 4;
    }
    
    // optional float frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 4;
    }
    
    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Shake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Shake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Shake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Shake::MergeFrom(const CCSUsrMsg_Shake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
    if (from._has_bit(1)) {
      set_local_amplitude(from.local_amplitude());
    }
    if (from._has_bit(2)) {
      set_frequency(from.frequency());
    }
    if (from._has_bit(3)) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Shake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Shake::CopyFrom(const CCSUsrMsg_Shake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Shake::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_Shake::Swap(CCSUsrMsg_Shake* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(local_amplitude_, other->local_amplitude_);
    std::swap(frequency_, other->frequency_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Shake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Shake_descriptor_;
  metadata.reflection = CCSUsrMsg_Shake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Fade::kDurationFieldNumber;
const int CCSUsrMsg_Fade::kHoldTimeFieldNumber;
const int CCSUsrMsg_Fade::kFlagsFieldNumber;
const int CCSUsrMsg_Fade::kClrFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Fade::CCSUsrMsg_Fade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Fade::InitAsDefaultInstance() {
  clr_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
}

CCSUsrMsg_Fade::CCSUsrMsg_Fade(const CCSUsrMsg_Fade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Fade::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  hold_time_ = 0;
  flags_ = 0;
  clr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Fade::~CCSUsrMsg_Fade() {
  SharedDtor();
}

void CCSUsrMsg_Fade::SharedDtor() {
  if (this != default_instance_) {
    delete clr_;
  }
}

void CCSUsrMsg_Fade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Fade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Fade_descriptor_;
}

const CCSUsrMsg_Fade& CCSUsrMsg_Fade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_Fade* CCSUsrMsg_Fade::default_instance_ = NULL;

CCSUsrMsg_Fade* CCSUsrMsg_Fade::New() const {
  return new CCSUsrMsg_Fade;
}

void CCSUsrMsg_Fade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0;
    hold_time_ = 0;
    flags_ = 0;
    if (_has_bit(3)) {
      if (clr_ != NULL) clr_->::CMsgRGBA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Fade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hold_time;
        break;
      }
      
      // optional int32 hold_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hold_time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clr;
        break;
      }
      
      // optional .CMsgRGBA clr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Fade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 duration = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }
  
  // optional int32 hold_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hold_time(), output);
  }
  
  // optional int32 flags = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }
  
  // optional .CMsgRGBA clr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Fade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 duration = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }
  
  // optional int32 hold_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hold_time(), target);
  }
  
  // optional int32 flags = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }
  
  // optional .CMsgRGBA clr = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->clr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Fade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }
    
    // optional int32 hold_time = 2;
    if (has_hold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hold_time());
    }
    
    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
    // optional .CMsgRGBA clr = 4;
    if (has_clr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Fade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Fade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Fade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Fade::MergeFrom(const CCSUsrMsg_Fade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_duration(from.duration());
    }
    if (from._has_bit(1)) {
      set_hold_time(from.hold_time());
    }
    if (from._has_bit(2)) {
      set_flags(from.flags());
    }
    if (from._has_bit(3)) {
      mutable_clr()->::CMsgRGBA::MergeFrom(from.clr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Fade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Fade::CopyFrom(const CCSUsrMsg_Fade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Fade::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_Fade::Swap(CCSUsrMsg_Fade* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(flags_, other->flags_);
    std::swap(clr_, other->clr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Fade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Fade_descriptor_;
  metadata.reflection = CCSUsrMsg_Fade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Rumble::kIndexFieldNumber;
const int CCSUsrMsg_Rumble::kDataFieldNumber;
const int CCSUsrMsg_Rumble::kFlagsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Rumble::CCSUsrMsg_Rumble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Rumble::InitAsDefaultInstance() {
}

CCSUsrMsg_Rumble::CCSUsrMsg_Rumble(const CCSUsrMsg_Rumble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Rumble::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  data_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Rumble::~CCSUsrMsg_Rumble() {
  SharedDtor();
}

void CCSUsrMsg_Rumble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_Rumble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Rumble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Rumble_descriptor_;
}

const CCSUsrMsg_Rumble& CCSUsrMsg_Rumble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_Rumble* CCSUsrMsg_Rumble::default_instance_ = NULL;

CCSUsrMsg_Rumble* CCSUsrMsg_Rumble::New() const {
  return new CCSUsrMsg_Rumble;
}

void CCSUsrMsg_Rumble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    data_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Rumble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }
      
      // optional int32 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Rumble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }
  
  // optional int32 flags = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Rumble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }
  
  // optional int32 flags = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Rumble::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }
    
    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Rumble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Rumble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Rumble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Rumble::MergeFrom(const CCSUsrMsg_Rumble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_index(from.index());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Rumble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Rumble::CopyFrom(const CCSUsrMsg_Rumble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Rumble::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_Rumble::Swap(CCSUsrMsg_Rumble* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(data_, other->data_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Rumble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Rumble_descriptor_;
  metadata.reflection = CCSUsrMsg_Rumble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CloseCaption::kHashFieldNumber;
const int CCSUsrMsg_CloseCaption::kDurationFieldNumber;
const int CCSUsrMsg_CloseCaption::kFromPlayerFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CloseCaption::InitAsDefaultInstance() {
}

CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption(const CCSUsrMsg_CloseCaption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CloseCaption::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CloseCaption::~CCSUsrMsg_CloseCaption() {
  SharedDtor();
}

void CCSUsrMsg_CloseCaption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CloseCaption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CloseCaption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CloseCaption_descriptor_;
}

const CCSUsrMsg_CloseCaption& CCSUsrMsg_CloseCaption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_CloseCaption* CCSUsrMsg_CloseCaption::default_instance_ = NULL;

CCSUsrMsg_CloseCaption* CCSUsrMsg_CloseCaption::New() const {
  return new CCSUsrMsg_CloseCaption;
}

void CCSUsrMsg_CloseCaption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = 0u;
    duration_ = 0;
    from_player_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CloseCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }
      
      // optional int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }
      
      // optional bool from_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CloseCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hash = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash(), output);
  }
  
  // optional int32 duration = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }
  
  // optional bool from_player = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CloseCaption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hash = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash(), target);
  }
  
  // optional int32 duration = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }
  
  // optional bool from_player = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CloseCaption::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }
    
    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }
    
    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CloseCaption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CloseCaption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CloseCaption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CloseCaption::MergeFrom(const CCSUsrMsg_CloseCaption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hash(from.hash());
    }
    if (from._has_bit(1)) {
      set_duration(from.duration());
    }
    if (from._has_bit(2)) {
      set_from_player(from.from_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CloseCaption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CloseCaption::CopyFrom(const CCSUsrMsg_CloseCaption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CloseCaption::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_CloseCaption::Swap(CCSUsrMsg_CloseCaption* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CloseCaption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CloseCaption_descriptor_;
  metadata.reflection = CCSUsrMsg_CloseCaption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CloseCaptionDirect::kHashFieldNumber;
const int CCSUsrMsg_CloseCaptionDirect::kDurationFieldNumber;
const int CCSUsrMsg_CloseCaptionDirect::kFromPlayerFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CloseCaptionDirect::InitAsDefaultInstance() {
}

CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect(const CCSUsrMsg_CloseCaptionDirect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CloseCaptionDirect::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CloseCaptionDirect::~CCSUsrMsg_CloseCaptionDirect() {
  SharedDtor();
}

void CCSUsrMsg_CloseCaptionDirect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CloseCaptionDirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CloseCaptionDirect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CloseCaptionDirect_descriptor_;
}

const CCSUsrMsg_CloseCaptionDirect& CCSUsrMsg_CloseCaptionDirect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_CloseCaptionDirect* CCSUsrMsg_CloseCaptionDirect::default_instance_ = NULL;

CCSUsrMsg_CloseCaptionDirect* CCSUsrMsg_CloseCaptionDirect::New() const {
  return new CCSUsrMsg_CloseCaptionDirect;
}

void CCSUsrMsg_CloseCaptionDirect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = 0u;
    duration_ = 0;
    from_player_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CloseCaptionDirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }
      
      // optional int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }
      
      // optional bool from_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CloseCaptionDirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hash = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash(), output);
  }
  
  // optional int32 duration = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }
  
  // optional bool from_player = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CloseCaptionDirect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hash = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash(), target);
  }
  
  // optional int32 duration = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }
  
  // optional bool from_player = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CloseCaptionDirect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }
    
    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }
    
    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CloseCaptionDirect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CloseCaptionDirect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CloseCaptionDirect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CloseCaptionDirect::MergeFrom(const CCSUsrMsg_CloseCaptionDirect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hash(from.hash());
    }
    if (from._has_bit(1)) {
      set_duration(from.duration());
    }
    if (from._has_bit(2)) {
      set_from_player(from.from_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CloseCaptionDirect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CloseCaptionDirect::CopyFrom(const CCSUsrMsg_CloseCaptionDirect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CloseCaptionDirect::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_CloseCaptionDirect::Swap(CCSUsrMsg_CloseCaptionDirect* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CloseCaptionDirect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CloseCaptionDirect_descriptor_;
  metadata.reflection = CCSUsrMsg_CloseCaptionDirect_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_SendAudio::_default_radio_sound_;
#ifndef _MSC_VER
const int CCSUsrMsg_SendAudio::kRadioSoundFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SendAudio::InitAsDefaultInstance() {
}

CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio(const CCSUsrMsg_SendAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SendAudio::SharedCtor() {
  _cached_size_ = 0;
  radio_sound_ = const_cast< ::std::string*>(&_default_radio_sound_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SendAudio::~CCSUsrMsg_SendAudio() {
  SharedDtor();
}

void CCSUsrMsg_SendAudio::SharedDtor() {
  if (radio_sound_ != &_default_radio_sound_) {
    delete radio_sound_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SendAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SendAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SendAudio_descriptor_;
}

const CCSUsrMsg_SendAudio& CCSUsrMsg_SendAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_SendAudio* CCSUsrMsg_SendAudio::default_instance_ = NULL;

CCSUsrMsg_SendAudio* CCSUsrMsg_SendAudio::New() const {
  return new CCSUsrMsg_SendAudio;
}

void CCSUsrMsg_SendAudio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (radio_sound_ != &_default_radio_sound_) {
        radio_sound_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SendAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string radio_sound = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radio_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->radio_sound().data(), this->radio_sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SendAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string radio_sound = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radio_sound().data(), this->radio_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->radio_sound(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SendAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string radio_sound = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radio_sound().data(), this->radio_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->radio_sound(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SendAudio::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string radio_sound = 1;
    if (has_radio_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radio_sound());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SendAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SendAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SendAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SendAudio::MergeFrom(const CCSUsrMsg_SendAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_radio_sound(from.radio_sound());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SendAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SendAudio::CopyFrom(const CCSUsrMsg_SendAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendAudio::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_SendAudio::Swap(CCSUsrMsg_SendAudio* other) {
  if (other != this) {
    std::swap(radio_sound_, other->radio_sound_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SendAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SendAudio_descriptor_;
  metadata.reflection = CCSUsrMsg_SendAudio_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_RawAudio::_default_voice_filename_;
#ifndef _MSC_VER
const int CCSUsrMsg_RawAudio::kPitchFieldNumber;
const int CCSUsrMsg_RawAudio::kEntidxFieldNumber;
const int CCSUsrMsg_RawAudio::kDurationFieldNumber;
const int CCSUsrMsg_RawAudio::kVoiceFilenameFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RawAudio::InitAsDefaultInstance() {
}

CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio(const CCSUsrMsg_RawAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RawAudio::SharedCtor() {
  _cached_size_ = 0;
  pitch_ = 0;
  entidx_ = 0;
  duration_ = 0;
  voice_filename_ = const_cast< ::std::string*>(&_default_voice_filename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RawAudio::~CCSUsrMsg_RawAudio() {
  SharedDtor();
}

void CCSUsrMsg_RawAudio::SharedDtor() {
  if (voice_filename_ != &_default_voice_filename_) {
    delete voice_filename_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RawAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RawAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RawAudio_descriptor_;
}

const CCSUsrMsg_RawAudio& CCSUsrMsg_RawAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_RawAudio* CCSUsrMsg_RawAudio::default_instance_ = NULL;

CCSUsrMsg_RawAudio* CCSUsrMsg_RawAudio::New() const {
  return new CCSUsrMsg_RawAudio;
}

void CCSUsrMsg_RawAudio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pitch_ = 0;
    entidx_ = 0;
    duration_ = 0;
    if (_has_bit(3)) {
      if (voice_filename_ != &_default_voice_filename_) {
        voice_filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RawAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pitch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitch_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entidx;
        break;
      }
      
      // optional int32 entidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_duration;
        break;
      }
      
      // optional float duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_voice_filename;
        break;
      }
      
      // optional string voice_filename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voice_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voice_filename().data(), this->voice_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RawAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pitch = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pitch(), output);
  }
  
  // optional int32 entidx = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entidx(), output);
  }
  
  // optional float duration = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }
  
  // optional string voice_filename = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voice_filename().data(), this->voice_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->voice_filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RawAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pitch = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pitch(), target);
  }
  
  // optional int32 entidx = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entidx(), target);
  }
  
  // optional float duration = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }
  
  // optional string voice_filename = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voice_filename().data(), this->voice_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->voice_filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RawAudio::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pitch = 1;
    if (has_pitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitch());
    }
    
    // optional int32 entidx = 2;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }
    
    // optional float duration = 3;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
    // optional string voice_filename = 4;
    if (has_voice_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voice_filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RawAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RawAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RawAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RawAudio::MergeFrom(const CCSUsrMsg_RawAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pitch(from.pitch());
    }
    if (from._has_bit(1)) {
      set_entidx(from.entidx());
    }
    if (from._has_bit(2)) {
      set_duration(from.duration());
    }
    if (from._has_bit(3)) {
      set_voice_filename(from.voice_filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RawAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RawAudio::CopyFrom(const CCSUsrMsg_RawAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RawAudio::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_RawAudio::Swap(CCSUsrMsg_RawAudio* other) {
  if (other != this) {
    std::swap(pitch_, other->pitch_);
    std::swap(entidx_, other->entidx_);
    std::swap(duration_, other->duration_);
    std::swap(voice_filename_, other->voice_filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RawAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RawAudio_descriptor_;
  metadata.reflection = CCSUsrMsg_RawAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VoiceMask_PlayerMask::kGameRulesMaskFieldNumber;
const int CCSUsrMsg_VoiceMask_PlayerMask::kBanMasksFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoiceMask_PlayerMask::InitAsDefaultInstance() {
}

CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask(const CCSUsrMsg_VoiceMask_PlayerMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoiceMask_PlayerMask::SharedCtor() {
  _cached_size_ = 0;
  game_rules_mask_ = 0;
  ban_masks_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoiceMask_PlayerMask::~CCSUsrMsg_VoiceMask_PlayerMask() {
  SharedDtor();
}

void CCSUsrMsg_VoiceMask_PlayerMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoiceMask_PlayerMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoiceMask_PlayerMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoiceMask_PlayerMask_descriptor_;
}

const CCSUsrMsg_VoiceMask_PlayerMask& CCSUsrMsg_VoiceMask_PlayerMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_VoiceMask_PlayerMask* CCSUsrMsg_VoiceMask_PlayerMask::default_instance_ = NULL;

CCSUsrMsg_VoiceMask_PlayerMask* CCSUsrMsg_VoiceMask_PlayerMask::New() const {
  return new CCSUsrMsg_VoiceMask_PlayerMask;
}

void CCSUsrMsg_VoiceMask_PlayerMask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_rules_mask_ = 0;
    ban_masks_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoiceMask_PlayerMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_rules_mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_rules_mask_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ban_masks;
        break;
      }
      
      // optional int32 ban_masks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ban_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ban_masks_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoiceMask_PlayerMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_rules_mask = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_rules_mask(), output);
  }
  
  // optional int32 ban_masks = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ban_masks(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoiceMask_PlayerMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_rules_mask = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_rules_mask(), target);
  }
  
  // optional int32 ban_masks = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ban_masks(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoiceMask_PlayerMask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_rules_mask = 1;
    if (has_game_rules_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_rules_mask());
    }
    
    // optional int32 ban_masks = 2;
    if (has_ban_masks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ban_masks());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoiceMask_PlayerMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoiceMask_PlayerMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoiceMask_PlayerMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoiceMask_PlayerMask::MergeFrom(const CCSUsrMsg_VoiceMask_PlayerMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_game_rules_mask(from.game_rules_mask());
    }
    if (from._has_bit(1)) {
      set_ban_masks(from.ban_masks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoiceMask_PlayerMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoiceMask_PlayerMask::CopyFrom(const CCSUsrMsg_VoiceMask_PlayerMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoiceMask_PlayerMask::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_VoiceMask_PlayerMask::Swap(CCSUsrMsg_VoiceMask_PlayerMask* other) {
  if (other != this) {
    std::swap(game_rules_mask_, other->game_rules_mask_);
    std::swap(ban_masks_, other->ban_masks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoiceMask_PlayerMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoiceMask_PlayerMask_descriptor_;
  metadata.reflection = CCSUsrMsg_VoiceMask_PlayerMask_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_VoiceMask::kPlayerMasksFieldNumber;
const int CCSUsrMsg_VoiceMask::kPlayerModEnableFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoiceMask::InitAsDefaultInstance() {
}

CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask(const CCSUsrMsg_VoiceMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoiceMask::SharedCtor() {
  _cached_size_ = 0;
  player_mod_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoiceMask::~CCSUsrMsg_VoiceMask() {
  SharedDtor();
}

void CCSUsrMsg_VoiceMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoiceMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoiceMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoiceMask_descriptor_;
}

const CCSUsrMsg_VoiceMask& CCSUsrMsg_VoiceMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_VoiceMask* CCSUsrMsg_VoiceMask::default_instance_ = NULL;

CCSUsrMsg_VoiceMask* CCSUsrMsg_VoiceMask::New() const {
  return new CCSUsrMsg_VoiceMask;
}

void CCSUsrMsg_VoiceMask::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    player_mod_enable_ = false;
  }
  player_masks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoiceMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_masks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_masks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_masks;
        if (input->ExpectTag(16)) goto parse_player_mod_enable;
        break;
      }
      
      // optional bool player_mod_enable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_mod_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_mod_enable_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoiceMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  for (int i = 0; i < this->player_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_masks(i), output);
  }
  
  // optional bool player_mod_enable = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->player_mod_enable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoiceMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  for (int i = 0; i < this->player_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_masks(i), target);
  }
  
  // optional bool player_mod_enable = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->player_mod_enable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoiceMask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool player_mod_enable = 2;
    if (has_player_mod_enable()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  total_size += 1 * this->player_masks_size();
  for (int i = 0; i < this->player_masks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_masks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoiceMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoiceMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoiceMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoiceMask::MergeFrom(const CCSUsrMsg_VoiceMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_masks_.MergeFrom(from.player_masks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_player_mod_enable(from.player_mod_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoiceMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoiceMask::CopyFrom(const CCSUsrMsg_VoiceMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoiceMask::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_VoiceMask::Swap(CCSUsrMsg_VoiceMask* other) {
  if (other != this) {
    player_masks_.Swap(&other->player_masks_);
    std::swap(player_mod_enable_, other->player_mod_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoiceMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoiceMask_descriptor_;
  metadata.reflection = CCSUsrMsg_VoiceMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_Damage::kAmountFieldNumber;
const int CCSUsrMsg_Damage::kInflictorWorldPosFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_Damage::CCSUsrMsg_Damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_Damage::InitAsDefaultInstance() {
  inflictor_world_pos_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CCSUsrMsg_Damage::CCSUsrMsg_Damage(const CCSUsrMsg_Damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_Damage::SharedCtor() {
  _cached_size_ = 0;
  amount_ = 0;
  inflictor_world_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_Damage::~CCSUsrMsg_Damage() {
  SharedDtor();
}

void CCSUsrMsg_Damage::SharedDtor() {
  if (this != default_instance_) {
    delete inflictor_world_pos_;
  }
}

void CCSUsrMsg_Damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_Damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_Damage_descriptor_;
}

const CCSUsrMsg_Damage& CCSUsrMsg_Damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_Damage* CCSUsrMsg_Damage::default_instance_ = NULL;

CCSUsrMsg_Damage* CCSUsrMsg_Damage::New() const {
  return new CCSUsrMsg_Damage;
}

void CCSUsrMsg_Damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = 0;
    if (_has_bit(1)) {
      if (inflictor_world_pos_ != NULL) inflictor_world_pos_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_Damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inflictor_world_pos;
        break;
      }
      
      // optional .CMsgVector inflictor_world_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inflictor_world_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inflictor_world_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_Damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 amount = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->amount(), output);
  }
  
  // optional .CMsgVector inflictor_world_pos = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inflictor_world_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_Damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 amount = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->amount(), target);
  }
  
  // optional .CMsgVector inflictor_world_pos = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inflictor_world_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_Damage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional .CMsgVector inflictor_world_pos = 2;
    if (has_inflictor_world_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inflictor_world_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_Damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_Damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_Damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_Damage::MergeFrom(const CCSUsrMsg_Damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_amount(from.amount());
    }
    if (from._has_bit(1)) {
      mutable_inflictor_world_pos()->::CMsgVector::MergeFrom(from.inflictor_world_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_Damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_Damage::CopyFrom(const CCSUsrMsg_Damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Damage::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_Damage::Swap(CCSUsrMsg_Damage* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(inflictor_world_pos_, other->inflictor_world_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_Damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_Damage_descriptor_;
  metadata.reflection = CCSUsrMsg_Damage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_RadioText::_default_msg_name_;
#ifndef _MSC_VER
const int CCSUsrMsg_RadioText::kMsgDstFieldNumber;
const int CCSUsrMsg_RadioText::kClientFieldNumber;
const int CCSUsrMsg_RadioText::kMsgNameFieldNumber;
const int CCSUsrMsg_RadioText::kParamsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RadioText::CCSUsrMsg_RadioText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RadioText::InitAsDefaultInstance() {
}

CCSUsrMsg_RadioText::CCSUsrMsg_RadioText(const CCSUsrMsg_RadioText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RadioText::SharedCtor() {
  _cached_size_ = 0;
  msg_dst_ = 0;
  client_ = 0;
  msg_name_ = const_cast< ::std::string*>(&_default_msg_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RadioText::~CCSUsrMsg_RadioText() {
  SharedDtor();
}

void CCSUsrMsg_RadioText::SharedDtor() {
  if (msg_name_ != &_default_msg_name_) {
    delete msg_name_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RadioText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RadioText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RadioText_descriptor_;
}

const CCSUsrMsg_RadioText& CCSUsrMsg_RadioText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_RadioText* CCSUsrMsg_RadioText::default_instance_ = NULL;

CCSUsrMsg_RadioText* CCSUsrMsg_RadioText::New() const {
  return new CCSUsrMsg_RadioText;
}

void CCSUsrMsg_RadioText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_dst_ = 0;
    client_ = 0;
    if (_has_bit(2)) {
      if (msg_name_ != &_default_msg_name_) {
        msg_name_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RadioText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_dst_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client;
        break;
      }
      
      // optional int32 client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_name;
        break;
      }
      
      // optional string msg_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }
      
      // repeated string params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(0).data(), this->params(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RadioText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msg_dst = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_dst(), output);
  }
  
  // optional int32 client = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client(), output);
  }
  
  // optional string msg_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_name(), output);
  }
  
  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->params(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RadioText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msg_dst = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_dst(), target);
  }
  
  // optional int32 client = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client(), target);
  }
  
  // optional string msg_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_name(), target);
  }
  
  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->params(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RadioText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_dst = 1;
    if (has_msg_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_dst());
    }
    
    // optional int32 client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client());
    }
    
    // optional string msg_name = 3;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_name());
    }
    
  }
  // repeated string params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RadioText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RadioText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RadioText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RadioText::MergeFrom(const CCSUsrMsg_RadioText& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg_dst(from.msg_dst());
    }
    if (from._has_bit(1)) {
      set_client(from.client());
    }
    if (from._has_bit(2)) {
      set_msg_name(from.msg_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RadioText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RadioText::CopyFrom(const CCSUsrMsg_RadioText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RadioText::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_RadioText::Swap(CCSUsrMsg_RadioText* other) {
  if (other != this) {
    std::swap(msg_dst_, other->msg_dst_);
    std::swap(client_, other->client_);
    std::swap(msg_name_, other->msg_name_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RadioText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RadioText_descriptor_;
  metadata.reflection = CCSUsrMsg_RadioText_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_HintText::_default_text_;
#ifndef _MSC_VER
const int CCSUsrMsg_HintText::kTextFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_HintText::CCSUsrMsg_HintText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_HintText::InitAsDefaultInstance() {
}

CCSUsrMsg_HintText::CCSUsrMsg_HintText(const CCSUsrMsg_HintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_HintText::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_HintText::~CCSUsrMsg_HintText() {
  SharedDtor();
}

void CCSUsrMsg_HintText::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_HintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_HintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_HintText_descriptor_;
}

const CCSUsrMsg_HintText& CCSUsrMsg_HintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_HintText* CCSUsrMsg_HintText::default_instance_ = NULL;

CCSUsrMsg_HintText* CCSUsrMsg_HintText::New() const {
  return new CCSUsrMsg_HintText;
}

void CCSUsrMsg_HintText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_HintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_HintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_HintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_HintText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_HintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_HintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_HintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_HintText::MergeFrom(const CCSUsrMsg_HintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_HintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_HintText::CopyFrom(const CCSUsrMsg_HintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HintText::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_HintText::Swap(CCSUsrMsg_HintText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_HintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_HintText_descriptor_;
  metadata.reflection = CCSUsrMsg_HintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_KeyHintText::kHintsFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_KeyHintText::InitAsDefaultInstance() {
}

CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText(const CCSUsrMsg_KeyHintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_KeyHintText::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_KeyHintText::~CCSUsrMsg_KeyHintText() {
  SharedDtor();
}

void CCSUsrMsg_KeyHintText::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_KeyHintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_KeyHintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_KeyHintText_descriptor_;
}

const CCSUsrMsg_KeyHintText& CCSUsrMsg_KeyHintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_KeyHintText* CCSUsrMsg_KeyHintText::default_instance_ = NULL;

CCSUsrMsg_KeyHintText* CCSUsrMsg_KeyHintText::New() const {
  return new CCSUsrMsg_KeyHintText;
}

void CCSUsrMsg_KeyHintText::Clear() {
  hints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_KeyHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string hints = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints(0).data(), this->hints(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_KeyHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string hints = 1;
  for (int i = 0; i < this->hints_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hints(i).data(), this->hints(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_KeyHintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string hints = 1;
  for (int i = 0; i < this->hints_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints(i).data(), this->hints(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->hints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_KeyHintText::ByteSize() const {
  int total_size = 0;
  
  // repeated string hints = 1;
  total_size += 1 * this->hints_size();
  for (int i = 0; i < this->hints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_KeyHintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_KeyHintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_KeyHintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_KeyHintText::MergeFrom(const CCSUsrMsg_KeyHintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  hints_.MergeFrom(from.hints_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_KeyHintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_KeyHintText::CopyFrom(const CCSUsrMsg_KeyHintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_KeyHintText::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_KeyHintText::Swap(CCSUsrMsg_KeyHintText* other) {
  if (other != this) {
    hints_.Swap(&other->hints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_KeyHintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_KeyHintText_descriptor_;
  metadata.reflection = CCSUsrMsg_KeyHintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kEntityIdxFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kClassIdFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kOriginXFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kOriginYFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kOriginZFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kAngleYFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kDefuserFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kPlayerHasDefuserFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::kPlayerHasC4FieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SharedCtor() {
  _cached_size_ = 0;
  entity_idx_ = 0;
  class_id_ = 0;
  origin_x_ = 0;
  origin_y_ = 0;
  origin_z_ = 0;
  angle_y_ = 0;
  defuser_ = false;
  player_has_defuser_ = false;
  player_has_c4_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::~CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate() {
  SharedDtor();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_;
}

const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::default_instance_ = NULL;

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::New() const {
  return new CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entity_idx_ = 0;
    class_id_ = 0;
    origin_x_ = 0;
    origin_y_ = 0;
    origin_z_ = 0;
    angle_y_ = 0;
    defuser_ = false;
    player_has_defuser_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    player_has_c4_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_idx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_class_id;
        break;
      }
      
      // optional int32 class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_origin_x;
        break;
      }
      
      // optional int32 origin_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_x_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_origin_y;
        break;
      }
      
      // optional int32 origin_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_y_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_origin_z;
        break;
      }
      
      // optional int32 origin_z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_z_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_angle_y;
        break;
      }
      
      // optional int32 angle_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_y_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defuser;
        break;
      }
      
      // optional bool defuser = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defuser_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_player_has_defuser;
        break;
      }
      
      // optional bool player_has_defuser = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_has_defuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_has_defuser_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_player_has_c4;
        break;
      }
      
      // optional bool player_has_c4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_has_c4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_has_c4_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entity_idx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_idx(), output);
  }
  
  // optional int32 class_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->class_id(), output);
  }
  
  // optional int32 origin_x = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->origin_x(), output);
  }
  
  // optional int32 origin_y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->origin_y(), output);
  }
  
  // optional int32 origin_z = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->origin_z(), output);
  }
  
  // optional int32 angle_y = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->angle_y(), output);
  }
  
  // optional bool defuser = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->defuser(), output);
  }
  
  // optional bool player_has_defuser = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->player_has_defuser(), output);
  }
  
  // optional bool player_has_c4 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->player_has_c4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entity_idx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_idx(), target);
  }
  
  // optional int32 class_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->class_id(), target);
  }
  
  // optional int32 origin_x = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->origin_x(), target);
  }
  
  // optional int32 origin_y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->origin_y(), target);
  }
  
  // optional int32 origin_z = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->origin_z(), target);
  }
  
  // optional int32 angle_y = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->angle_y(), target);
  }
  
  // optional bool defuser = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->defuser(), target);
  }
  
  // optional bool player_has_defuser = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->player_has_defuser(), target);
  }
  
  // optional bool player_has_c4 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->player_has_c4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entity_idx = 1;
    if (has_entity_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_idx());
    }
    
    // optional int32 class_id = 2;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }
    
    // optional int32 origin_x = 3;
    if (has_origin_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_x());
    }
    
    // optional int32 origin_y = 4;
    if (has_origin_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_y());
    }
    
    // optional int32 origin_z = 5;
    if (has_origin_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_z());
    }
    
    // optional int32 angle_y = 6;
    if (has_angle_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle_y());
    }
    
    // optional bool defuser = 7;
    if (has_defuser()) {
      total_size += 1 + 1;
    }
    
    // optional bool player_has_defuser = 8;
    if (has_player_has_defuser()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool player_has_c4 = 9;
    if (has_player_has_c4()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entity_idx(from.entity_idx());
    }
    if (from._has_bit(1)) {
      set_class_id(from.class_id());
    }
    if (from._has_bit(2)) {
      set_origin_x(from.origin_x());
    }
    if (from._has_bit(3)) {
      set_origin_y(from.origin_y());
    }
    if (from._has_bit(4)) {
      set_origin_z(from.origin_z());
    }
    if (from._has_bit(5)) {
      set_angle_y(from.angle_y());
    }
    if (from._has_bit(6)) {
      set_defuser(from.defuser());
    }
    if (from._has_bit(7)) {
      set_player_has_defuser(from.player_has_defuser());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_player_has_c4(from.player_has_c4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CopyFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::Swap(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* other) {
  if (other != this) {
    std::swap(entity_idx_, other->entity_idx_);
    std::swap(class_id_, other->class_id_);
    std::swap(origin_x_, other->origin_x_);
    std::swap(origin_y_, other->origin_y_);
    std::swap(origin_z_, other->origin_z_);
    std::swap(angle_y_, other->angle_y_);
    std::swap(defuser_, other->defuser_);
    std::swap(player_has_defuser_, other->player_has_defuser_);
    std::swap(player_has_c4_, other->player_has_c4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_ProcessSpottedEntityUpdate::kNewUpdateFieldNumber;
const int CCSUsrMsg_ProcessSpottedEntityUpdate::kEntityUpdatesFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate(const CCSUsrMsg_ProcessSpottedEntityUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SharedCtor() {
  _cached_size_ = 0;
  new_update_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ProcessSpottedEntityUpdate::~CCSUsrMsg_ProcessSpottedEntityUpdate() {
  SharedDtor();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ProcessSpottedEntityUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_;
}

const CCSUsrMsg_ProcessSpottedEntityUpdate& CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ProcessSpottedEntityUpdate* CCSUsrMsg_ProcessSpottedEntityUpdate::default_instance_ = NULL;

CCSUsrMsg_ProcessSpottedEntityUpdate* CCSUsrMsg_ProcessSpottedEntityUpdate::New() const {
  return new CCSUsrMsg_ProcessSpottedEntityUpdate;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_update_ = false;
  }
  entity_updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool new_update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_update_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity_updates;
        break;
      }
      
      // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity_updates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool new_update = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->new_update(), output);
  }
  
  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  for (int i = 0; i < this->entity_updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity_updates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ProcessSpottedEntityUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool new_update = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->new_update(), target);
  }
  
  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  for (int i = 0; i < this->entity_updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entity_updates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ProcessSpottedEntityUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool new_update = 1;
    if (has_new_update()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  total_size += 1 * this->entity_updates_size();
  for (int i = 0; i < this->entity_updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity_updates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ProcessSpottedEntityUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ProcessSpottedEntityUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::MergeFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  entity_updates_.MergeFrom(from.entity_updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_new_update(from.new_update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::CopyFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::Swap(CCSUsrMsg_ProcessSpottedEntityUpdate* other) {
  if (other != this) {
    std::swap(new_update_, other->new_update_);
    entity_updates_.Swap(&other->entity_updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ProcessSpottedEntityUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ProcessSpottedEntityUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_ProcessSpottedEntityUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ReloadEffect::kEntidxFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ReloadEffect::InitAsDefaultInstance() {
}

CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect(const CCSUsrMsg_ReloadEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ReloadEffect::SharedCtor() {
  _cached_size_ = 0;
  entidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ReloadEffect::~CCSUsrMsg_ReloadEffect() {
  SharedDtor();
}

void CCSUsrMsg_ReloadEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ReloadEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ReloadEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ReloadEffect_descriptor_;
}

const CCSUsrMsg_ReloadEffect& CCSUsrMsg_ReloadEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ReloadEffect* CCSUsrMsg_ReloadEffect::default_instance_ = NULL;

CCSUsrMsg_ReloadEffect* CCSUsrMsg_ReloadEffect::New() const {
  return new CCSUsrMsg_ReloadEffect;
}

void CCSUsrMsg_ReloadEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ReloadEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ReloadEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entidx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ReloadEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entidx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ReloadEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entidx = 1;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ReloadEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ReloadEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ReloadEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ReloadEffect::MergeFrom(const CCSUsrMsg_ReloadEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entidx(from.entidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ReloadEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ReloadEffect::CopyFrom(const CCSUsrMsg_ReloadEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ReloadEffect::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ReloadEffect::Swap(CCSUsrMsg_ReloadEffect* other) {
  if (other != this) {
    std::swap(entidx_, other->entidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ReloadEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ReloadEffect_descriptor_;
  metadata.reflection = CCSUsrMsg_ReloadEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_AdjustMoney::kAmountFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_AdjustMoney::InitAsDefaultInstance() {
}

CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney(const CCSUsrMsg_AdjustMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_AdjustMoney::SharedCtor() {
  _cached_size_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_AdjustMoney::~CCSUsrMsg_AdjustMoney() {
  SharedDtor();
}

void CCSUsrMsg_AdjustMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_AdjustMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_AdjustMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_AdjustMoney_descriptor_;
}

const CCSUsrMsg_AdjustMoney& CCSUsrMsg_AdjustMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_AdjustMoney* CCSUsrMsg_AdjustMoney::default_instance_ = NULL;

CCSUsrMsg_AdjustMoney* CCSUsrMsg_AdjustMoney::New() const {
  return new CCSUsrMsg_AdjustMoney;
}

void CCSUsrMsg_AdjustMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_AdjustMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_AdjustMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 amount = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_AdjustMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 amount = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_AdjustMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_AdjustMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_AdjustMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_AdjustMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_AdjustMoney::MergeFrom(const CCSUsrMsg_AdjustMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_AdjustMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_AdjustMoney::CopyFrom(const CCSUsrMsg_AdjustMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AdjustMoney::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_AdjustMoney::Swap(CCSUsrMsg_AdjustMoney* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_AdjustMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_AdjustMoney_descriptor_;
  metadata.reflection = CCSUsrMsg_AdjustMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_KillCam::kObsModeFieldNumber;
const int CCSUsrMsg_KillCam::kFirstTargetFieldNumber;
const int CCSUsrMsg_KillCam::kSecondTargetFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_KillCam::CCSUsrMsg_KillCam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_KillCam::InitAsDefaultInstance() {
}

CCSUsrMsg_KillCam::CCSUsrMsg_KillCam(const CCSUsrMsg_KillCam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_KillCam::SharedCtor() {
  _cached_size_ = 0;
  obs_mode_ = 0;
  first_target_ = 0;
  second_target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_KillCam::~CCSUsrMsg_KillCam() {
  SharedDtor();
}

void CCSUsrMsg_KillCam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_KillCam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_KillCam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_KillCam_descriptor_;
}

const CCSUsrMsg_KillCam& CCSUsrMsg_KillCam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_KillCam* CCSUsrMsg_KillCam::default_instance_ = NULL;

CCSUsrMsg_KillCam* CCSUsrMsg_KillCam::New() const {
  return new CCSUsrMsg_KillCam;
}

void CCSUsrMsg_KillCam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obs_mode_ = 0;
    first_target_ = 0;
    second_target_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_KillCam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obs_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obs_mode_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_target;
        break;
      }
      
      // optional int32 first_target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_target_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second_target;
        break;
      }
      
      // optional int32 second_target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_target_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_KillCam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 obs_mode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obs_mode(), output);
  }
  
  // optional int32 first_target = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_target(), output);
  }
  
  // optional int32 second_target = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->second_target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_KillCam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 obs_mode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obs_mode(), target);
  }
  
  // optional int32 first_target = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_target(), target);
  }
  
  // optional int32 second_target = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->second_target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_KillCam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 obs_mode = 1;
    if (has_obs_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obs_mode());
    }
    
    // optional int32 first_target = 2;
    if (has_first_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_target());
    }
    
    // optional int32 second_target = 3;
    if (has_second_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_KillCam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_KillCam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_KillCam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_KillCam::MergeFrom(const CCSUsrMsg_KillCam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_obs_mode(from.obs_mode());
    }
    if (from._has_bit(1)) {
      set_first_target(from.first_target());
    }
    if (from._has_bit(2)) {
      set_second_target(from.second_target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_KillCam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_KillCam::CopyFrom(const CCSUsrMsg_KillCam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_KillCam::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_KillCam::Swap(CCSUsrMsg_KillCam* other) {
  if (other != this) {
    std::swap(obs_mode_, other->obs_mode_);
    std::swap(first_target_, other->first_target_);
    std::swap(second_target_, other->second_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_KillCam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_KillCam_descriptor_;
  metadata.reflection = CCSUsrMsg_KillCam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_DesiredTimescale::kDesiredTimescaleFieldNumber;
const int CCSUsrMsg_DesiredTimescale::kDurationRealtimeSecFieldNumber;
const int CCSUsrMsg_DesiredTimescale::kInterpolatorTypeFieldNumber;
const int CCSUsrMsg_DesiredTimescale::kStartBlendTimeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_DesiredTimescale::InitAsDefaultInstance() {
}

CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale(const CCSUsrMsg_DesiredTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_DesiredTimescale::SharedCtor() {
  _cached_size_ = 0;
  desired_timescale_ = 0;
  duration_realtime_sec_ = 0;
  interpolator_type_ = 0;
  start_blend_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_DesiredTimescale::~CCSUsrMsg_DesiredTimescale() {
  SharedDtor();
}

void CCSUsrMsg_DesiredTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_DesiredTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_DesiredTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_DesiredTimescale_descriptor_;
}

const CCSUsrMsg_DesiredTimescale& CCSUsrMsg_DesiredTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_DesiredTimescale* CCSUsrMsg_DesiredTimescale::default_instance_ = NULL;

CCSUsrMsg_DesiredTimescale* CCSUsrMsg_DesiredTimescale::New() const {
  return new CCSUsrMsg_DesiredTimescale;
}

void CCSUsrMsg_DesiredTimescale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desired_timescale_ = 0;
    duration_realtime_sec_ = 0;
    interpolator_type_ = 0;
    start_blend_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_DesiredTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float desired_timescale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_timescale_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration_realtime_sec;
        break;
      }
      
      // optional float duration_realtime_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration_realtime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_realtime_sec_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_interpolator_type;
        break;
      }
      
      // optional int32 interpolator_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolator_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interpolator_type_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_start_blend_time;
        break;
      }
      
      // optional float start_blend_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_blend_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_blend_time_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_DesiredTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float desired_timescale = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->desired_timescale(), output);
  }
  
  // optional float duration_realtime_sec = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration_realtime_sec(), output);
  }
  
  // optional int32 interpolator_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interpolator_type(), output);
  }
  
  // optional float start_blend_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start_blend_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_DesiredTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float desired_timescale = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->desired_timescale(), target);
  }
  
  // optional float duration_realtime_sec = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration_realtime_sec(), target);
  }
  
  // optional int32 interpolator_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->interpolator_type(), target);
  }
  
  // optional float start_blend_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->start_blend_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_DesiredTimescale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float desired_timescale = 1;
    if (has_desired_timescale()) {
      total_size += 1 + 4;
    }
    
    // optional float duration_realtime_sec = 2;
    if (has_duration_realtime_sec()) {
      total_size += 1 + 4;
    }
    
    // optional int32 interpolator_type = 3;
    if (has_interpolator_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interpolator_type());
    }
    
    // optional float start_blend_time = 4;
    if (has_start_blend_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_DesiredTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_DesiredTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_DesiredTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_DesiredTimescale::MergeFrom(const CCSUsrMsg_DesiredTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_desired_timescale(from.desired_timescale());
    }
    if (from._has_bit(1)) {
      set_duration_realtime_sec(from.duration_realtime_sec());
    }
    if (from._has_bit(2)) {
      set_interpolator_type(from.interpolator_type());
    }
    if (from._has_bit(3)) {
      set_start_blend_time(from.start_blend_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_DesiredTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_DesiredTimescale::CopyFrom(const CCSUsrMsg_DesiredTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DesiredTimescale::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_DesiredTimescale::Swap(CCSUsrMsg_DesiredTimescale* other) {
  if (other != this) {
    std::swap(desired_timescale_, other->desired_timescale_);
    std::swap(duration_realtime_sec_, other->duration_realtime_sec_);
    std::swap(interpolator_type_, other->interpolator_type_);
    std::swap(start_blend_time_, other->start_blend_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_DesiredTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_DesiredTimescale_descriptor_;
  metadata.reflection = CCSUsrMsg_DesiredTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CurrentTimescale::kCurTimescaleFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CurrentTimescale::InitAsDefaultInstance() {
}

CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale(const CCSUsrMsg_CurrentTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CurrentTimescale::SharedCtor() {
  _cached_size_ = 0;
  cur_timescale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CurrentTimescale::~CCSUsrMsg_CurrentTimescale() {
  SharedDtor();
}

void CCSUsrMsg_CurrentTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CurrentTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CurrentTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CurrentTimescale_descriptor_;
}

const CCSUsrMsg_CurrentTimescale& CCSUsrMsg_CurrentTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_CurrentTimescale* CCSUsrMsg_CurrentTimescale::default_instance_ = NULL;

CCSUsrMsg_CurrentTimescale* CCSUsrMsg_CurrentTimescale::New() const {
  return new CCSUsrMsg_CurrentTimescale;
}

void CCSUsrMsg_CurrentTimescale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_timescale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CurrentTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cur_timescale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_timescale_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CurrentTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float cur_timescale = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cur_timescale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CurrentTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float cur_timescale = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cur_timescale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CurrentTimescale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float cur_timescale = 1;
    if (has_cur_timescale()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CurrentTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CurrentTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CurrentTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CurrentTimescale::MergeFrom(const CCSUsrMsg_CurrentTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cur_timescale(from.cur_timescale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CurrentTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CurrentTimescale::CopyFrom(const CCSUsrMsg_CurrentTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CurrentTimescale::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_CurrentTimescale::Swap(CCSUsrMsg_CurrentTimescale* other) {
  if (other != this) {
    std::swap(cur_timescale_, other->cur_timescale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CurrentTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CurrentTimescale_descriptor_;
  metadata.reflection = CCSUsrMsg_CurrentTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_AchievementEvent::kAchievementFieldNumber;
const int CCSUsrMsg_AchievementEvent::kCountFieldNumber;
const int CCSUsrMsg_AchievementEvent::kUserIdFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_AchievementEvent::InitAsDefaultInstance() {
}

CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent(const CCSUsrMsg_AchievementEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_AchievementEvent::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = 0;
  count_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_AchievementEvent::~CCSUsrMsg_AchievementEvent() {
  SharedDtor();
}

void CCSUsrMsg_AchievementEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_AchievementEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_AchievementEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_AchievementEvent_descriptor_;
}

const CCSUsrMsg_AchievementEvent& CCSUsrMsg_AchievementEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_AchievementEvent* CCSUsrMsg_AchievementEvent::default_instance_ = NULL;

CCSUsrMsg_AchievementEvent* CCSUsrMsg_AchievementEvent::New() const {
  return new CCSUsrMsg_AchievementEvent;
}

void CCSUsrMsg_AchievementEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievement_ = 0;
    count_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_AchievementEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievement_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_AchievementEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 achievement = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achievement(), output);
  }
  
  // optional int32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_AchievementEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 achievement = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achievement(), target);
  }
  
  // optional int32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_AchievementEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 achievement = 1;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievement());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_AchievementEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_AchievementEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_AchievementEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_AchievementEvent::MergeFrom(const CCSUsrMsg_AchievementEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_achievement(from.achievement());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(2)) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_AchievementEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_AchievementEvent::CopyFrom(const CCSUsrMsg_AchievementEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AchievementEvent::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_AchievementEvent::Swap(CCSUsrMsg_AchievementEvent* other) {
  if (other != this) {
    std::swap(achievement_, other->achievement_);
    std::swap(count_, other->count_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_AchievementEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_AchievementEvent_descriptor_;
  metadata.reflection = CCSUsrMsg_AchievementEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_MatchEndConditions::kFraglimitFieldNumber;
const int CCSUsrMsg_MatchEndConditions::kMpMaxroundsFieldNumber;
const int CCSUsrMsg_MatchEndConditions::kMpWinlimitFieldNumber;
const int CCSUsrMsg_MatchEndConditions::kMpTimelimitFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_MatchEndConditions::InitAsDefaultInstance() {
}

CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions(const CCSUsrMsg_MatchEndConditions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_MatchEndConditions::SharedCtor() {
  _cached_size_ = 0;
  fraglimit_ = 0;
  mp_maxrounds_ = 0;
  mp_winlimit_ = 0;
  mp_timelimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_MatchEndConditions::~CCSUsrMsg_MatchEndConditions() {
  SharedDtor();
}

void CCSUsrMsg_MatchEndConditions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_MatchEndConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_MatchEndConditions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_MatchEndConditions_descriptor_;
}

const CCSUsrMsg_MatchEndConditions& CCSUsrMsg_MatchEndConditions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_MatchEndConditions* CCSUsrMsg_MatchEndConditions::default_instance_ = NULL;

CCSUsrMsg_MatchEndConditions* CCSUsrMsg_MatchEndConditions::New() const {
  return new CCSUsrMsg_MatchEndConditions;
}

void CCSUsrMsg_MatchEndConditions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fraglimit_ = 0;
    mp_maxrounds_ = 0;
    mp_winlimit_ = 0;
    mp_timelimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_MatchEndConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fraglimit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fraglimit_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mp_maxrounds;
        break;
      }
      
      // optional int32 mp_maxrounds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_maxrounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_maxrounds_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mp_winlimit;
        break;
      }
      
      // optional int32 mp_winlimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_winlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_winlimit_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mp_timelimit;
        break;
      }
      
      // optional int32 mp_timelimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_timelimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_timelimit_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_MatchEndConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fraglimit = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fraglimit(), output);
  }
  
  // optional int32 mp_maxrounds = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mp_maxrounds(), output);
  }
  
  // optional int32 mp_winlimit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mp_winlimit(), output);
  }
  
  // optional int32 mp_timelimit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp_timelimit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_MatchEndConditions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fraglimit = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fraglimit(), target);
  }
  
  // optional int32 mp_maxrounds = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mp_maxrounds(), target);
  }
  
  // optional int32 mp_winlimit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mp_winlimit(), target);
  }
  
  // optional int32 mp_timelimit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp_timelimit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_MatchEndConditions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fraglimit = 1;
    if (has_fraglimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fraglimit());
    }
    
    // optional int32 mp_maxrounds = 2;
    if (has_mp_maxrounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_maxrounds());
    }
    
    // optional int32 mp_winlimit = 3;
    if (has_mp_winlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_winlimit());
    }
    
    // optional int32 mp_timelimit = 4;
    if (has_mp_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_timelimit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_MatchEndConditions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_MatchEndConditions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_MatchEndConditions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_MatchEndConditions::MergeFrom(const CCSUsrMsg_MatchEndConditions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fraglimit(from.fraglimit());
    }
    if (from._has_bit(1)) {
      set_mp_maxrounds(from.mp_maxrounds());
    }
    if (from._has_bit(2)) {
      set_mp_winlimit(from.mp_winlimit());
    }
    if (from._has_bit(3)) {
      set_mp_timelimit(from.mp_timelimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_MatchEndConditions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_MatchEndConditions::CopyFrom(const CCSUsrMsg_MatchEndConditions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MatchEndConditions::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_MatchEndConditions::Swap(CCSUsrMsg_MatchEndConditions* other) {
  if (other != this) {
    std::swap(fraglimit_, other->fraglimit_);
    std::swap(mp_maxrounds_, other->mp_maxrounds_);
    std::swap(mp_winlimit_, other->mp_winlimit_);
    std::swap(mp_timelimit_, other->mp_timelimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_MatchEndConditions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_MatchEndConditions_descriptor_;
  metadata.reflection = CCSUsrMsg_MatchEndConditions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_PlayerStatsUpdate_Stat::kIdxFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate_Stat::kDeltaFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::InitAsDefaultInstance() {
}

CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat(const CCSUsrMsg_PlayerStatsUpdate_Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_PlayerStatsUpdate_Stat::~CCSUsrMsg_PlayerStatsUpdate_Stat() {
  SharedDtor();
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerStatsUpdate_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_;
}

const CCSUsrMsg_PlayerStatsUpdate_Stat& CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_PlayerStatsUpdate_Stat* CCSUsrMsg_PlayerStatsUpdate_Stat::default_instance_ = NULL;

CCSUsrMsg_PlayerStatsUpdate_Stat* CCSUsrMsg_PlayerStatsUpdate_Stat::New() const {
  return new CCSUsrMsg_PlayerStatsUpdate_Stat;
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    delta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_PlayerStatsUpdate_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delta;
        break;
      }
      
      // optional int32 delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }
  
  // optional int32 delta = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_PlayerStatsUpdate_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }
  
  // optional int32 delta = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_PlayerStatsUpdate_Stat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }
    
    // optional int32 delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_PlayerStatsUpdate_Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_PlayerStatsUpdate_Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::MergeFrom(const CCSUsrMsg_PlayerStatsUpdate_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_idx(from.idx());
    }
    if (from._has_bit(1)) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::CopyFrom(const CCSUsrMsg_PlayerStatsUpdate_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerStatsUpdate_Stat::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::Swap(CCSUsrMsg_PlayerStatsUpdate_Stat* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_PlayerStatsUpdate_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_PlayerStatsUpdate_Stat_descriptor_;
  metadata.reflection = CCSUsrMsg_PlayerStatsUpdate_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_PlayerStatsUpdate::kVersionFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate::kOfficialServerFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate::kStatsFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate::kUserIdFieldNumber;
const int CCSUsrMsg_PlayerStatsUpdate::kCrcFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_PlayerStatsUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate(const CCSUsrMsg_PlayerStatsUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerStatsUpdate::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  official_server_ = 0;
  user_id_ = 0;
  crc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_PlayerStatsUpdate::~CCSUsrMsg_PlayerStatsUpdate() {
  SharedDtor();
}

void CCSUsrMsg_PlayerStatsUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_PlayerStatsUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_PlayerStatsUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_PlayerStatsUpdate_descriptor_;
}

const CCSUsrMsg_PlayerStatsUpdate& CCSUsrMsg_PlayerStatsUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_PlayerStatsUpdate* CCSUsrMsg_PlayerStatsUpdate::default_instance_ = NULL;

CCSUsrMsg_PlayerStatsUpdate* CCSUsrMsg_PlayerStatsUpdate::New() const {
  return new CCSUsrMsg_PlayerStatsUpdate;
}

void CCSUsrMsg_PlayerStatsUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    official_server_ = 0;
    user_id_ = 0;
    crc_ = 0;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_PlayerStatsUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_official_server;
        break;
      }
      
      // optional int32 official_server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_server_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        break;
      }
      
      // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_crc;
        break;
      }
      
      // optional int32 crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crc_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_PlayerStatsUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // optional int32 official_server = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->official_server(), output);
  }
  
  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stats(i), output);
  }
  
  // optional int32 user_id = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_id(), output);
  }
  
  // optional int32 crc = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->crc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_PlayerStatsUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // optional int32 official_server = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->official_server(), target);
  }
  
  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stats(i), target);
  }
  
  // optional int32 user_id = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_id(), target);
  }
  
  // optional int32 crc = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->crc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_PlayerStatsUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // optional int32 official_server = 2;
    if (has_official_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official_server());
    }
    
    // optional int32 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 crc = 6;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crc());
    }
    
  }
  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_PlayerStatsUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_PlayerStatsUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_PlayerStatsUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_PlayerStatsUpdate::MergeFrom(const CCSUsrMsg_PlayerStatsUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_official_server(from.official_server());
    }
    if (from._has_bit(3)) {
      set_user_id(from.user_id());
    }
    if (from._has_bit(4)) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_PlayerStatsUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_PlayerStatsUpdate::CopyFrom(const CCSUsrMsg_PlayerStatsUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerStatsUpdate::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_PlayerStatsUpdate::Swap(CCSUsrMsg_PlayerStatsUpdate* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(official_server_, other->official_server_);
    stats_.Swap(&other->stats_);
    std::swap(user_id_, other->user_id_);
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_PlayerStatsUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_PlayerStatsUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_PlayerStatsUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_DisplayInventory::kDisplayFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_DisplayInventory::CCSUsrMsg_DisplayInventory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_DisplayInventory::InitAsDefaultInstance() {
}

CCSUsrMsg_DisplayInventory::CCSUsrMsg_DisplayInventory(const CCSUsrMsg_DisplayInventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_DisplayInventory::SharedCtor() {
  _cached_size_ = 0;
  display_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_DisplayInventory::~CCSUsrMsg_DisplayInventory() {
  SharedDtor();
}

void CCSUsrMsg_DisplayInventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_DisplayInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_DisplayInventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_DisplayInventory_descriptor_;
}

const CCSUsrMsg_DisplayInventory& CCSUsrMsg_DisplayInventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_DisplayInventory* CCSUsrMsg_DisplayInventory::default_instance_ = NULL;

CCSUsrMsg_DisplayInventory* CCSUsrMsg_DisplayInventory::New() const {
  return new CCSUsrMsg_DisplayInventory;
}

void CCSUsrMsg_DisplayInventory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    display_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_DisplayInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_DisplayInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool display = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->display(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_DisplayInventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool display = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->display(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_DisplayInventory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool display = 1;
    if (has_display()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_DisplayInventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_DisplayInventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_DisplayInventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_DisplayInventory::MergeFrom(const CCSUsrMsg_DisplayInventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_display(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_DisplayInventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_DisplayInventory::CopyFrom(const CCSUsrMsg_DisplayInventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DisplayInventory::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_DisplayInventory::Swap(CCSUsrMsg_DisplayInventory* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_DisplayInventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_DisplayInventory_descriptor_;
  metadata.reflection = CCSUsrMsg_DisplayInventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_XRankGet::kModeIdxFieldNumber;
const int CCSUsrMsg_XRankGet::kControllerFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_XRankGet::InitAsDefaultInstance() {
}

CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet(const CCSUsrMsg_XRankGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_XRankGet::SharedCtor() {
  _cached_size_ = 0;
  mode_idx_ = 0;
  controller_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_XRankGet::~CCSUsrMsg_XRankGet() {
  SharedDtor();
}

void CCSUsrMsg_XRankGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_XRankGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_XRankGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_XRankGet_descriptor_;
}

const CCSUsrMsg_XRankGet& CCSUsrMsg_XRankGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_XRankGet* CCSUsrMsg_XRankGet::default_instance_ = NULL;

CCSUsrMsg_XRankGet* CCSUsrMsg_XRankGet::New() const {
  return new CCSUsrMsg_XRankGet;
}

void CCSUsrMsg_XRankGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_idx_ = 0;
    controller_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_XRankGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_idx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_controller;
        break;
      }
      
      // optional int32 controller = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_XRankGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode_idx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode_idx(), output);
  }
  
  // optional int32 controller = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->controller(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_XRankGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mode_idx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode_idx(), target);
  }
  
  // optional int32 controller = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->controller(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_XRankGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode_idx = 1;
    if (has_mode_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_idx());
    }
    
    // optional int32 controller = 2;
    if (has_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_XRankGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_XRankGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_XRankGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_XRankGet::MergeFrom(const CCSUsrMsg_XRankGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mode_idx(from.mode_idx());
    }
    if (from._has_bit(1)) {
      set_controller(from.controller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_XRankGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_XRankGet::CopyFrom(const CCSUsrMsg_XRankGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XRankGet::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_XRankGet::Swap(CCSUsrMsg_XRankGet* other) {
  if (other != this) {
    std::swap(mode_idx_, other->mode_idx_);
    std::swap(controller_, other->controller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_XRankGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_XRankGet_descriptor_;
  metadata.reflection = CCSUsrMsg_XRankGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_XRankUpd::kModeIdxFieldNumber;
const int CCSUsrMsg_XRankUpd::kControllerFieldNumber;
const int CCSUsrMsg_XRankUpd::kRankingFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_XRankUpd::InitAsDefaultInstance() {
}

CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd(const CCSUsrMsg_XRankUpd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_XRankUpd::SharedCtor() {
  _cached_size_ = 0;
  mode_idx_ = 0;
  controller_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_XRankUpd::~CCSUsrMsg_XRankUpd() {
  SharedDtor();
}

void CCSUsrMsg_XRankUpd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_XRankUpd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_XRankUpd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_XRankUpd_descriptor_;
}

const CCSUsrMsg_XRankUpd& CCSUsrMsg_XRankUpd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_XRankUpd* CCSUsrMsg_XRankUpd::default_instance_ = NULL;

CCSUsrMsg_XRankUpd* CCSUsrMsg_XRankUpd::New() const {
  return new CCSUsrMsg_XRankUpd;
}

void CCSUsrMsg_XRankUpd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_idx_ = 0;
    controller_ = 0;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_XRankUpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_idx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_controller;
        break;
      }
      
      // optional int32 controller = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranking;
        break;
      }
      
      // optional int32 ranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_XRankUpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode_idx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode_idx(), output);
  }
  
  // optional int32 controller = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->controller(), output);
  }
  
  // optional int32 ranking = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_XRankUpd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mode_idx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode_idx(), target);
  }
  
  // optional int32 controller = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->controller(), target);
  }
  
  // optional int32 ranking = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_XRankUpd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode_idx = 1;
    if (has_mode_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_idx());
    }
    
    // optional int32 controller = 2;
    if (has_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller());
    }
    
    // optional int32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_XRankUpd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_XRankUpd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_XRankUpd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_XRankUpd::MergeFrom(const CCSUsrMsg_XRankUpd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mode_idx(from.mode_idx());
    }
    if (from._has_bit(1)) {
      set_controller(from.controller());
    }
    if (from._has_bit(2)) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_XRankUpd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_XRankUpd::CopyFrom(const CCSUsrMsg_XRankUpd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XRankUpd::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_XRankUpd::Swap(CCSUsrMsg_XRankUpd* other) {
  if (other != this) {
    std::swap(mode_idx_, other->mode_idx_);
    std::swap(controller_, other->controller_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_XRankUpd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_XRankUpd_descriptor_;
  metadata.reflection = CCSUsrMsg_XRankUpd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SetPlayerEloDisplayBracket::kBracketFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SetPlayerEloDisplayBracket::CCSUsrMsg_SetPlayerEloDisplayBracket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::InitAsDefaultInstance() {
}

CCSUsrMsg_SetPlayerEloDisplayBracket::CCSUsrMsg_SetPlayerEloDisplayBracket(const CCSUsrMsg_SetPlayerEloDisplayBracket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::SharedCtor() {
  _cached_size_ = 0;
  bracket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SetPlayerEloDisplayBracket::~CCSUsrMsg_SetPlayerEloDisplayBracket() {
  SharedDtor();
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SetPlayerEloDisplayBracket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SetPlayerEloDisplayBracket_descriptor_;
}

const CCSUsrMsg_SetPlayerEloDisplayBracket& CCSUsrMsg_SetPlayerEloDisplayBracket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_SetPlayerEloDisplayBracket* CCSUsrMsg_SetPlayerEloDisplayBracket::default_instance_ = NULL;

CCSUsrMsg_SetPlayerEloDisplayBracket* CCSUsrMsg_SetPlayerEloDisplayBracket::New() const {
  return new CCSUsrMsg_SetPlayerEloDisplayBracket;
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bracket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SetPlayerEloDisplayBracket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bracket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bracket_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bracket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bracket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SetPlayerEloDisplayBracket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bracket = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bracket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SetPlayerEloDisplayBracket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bracket = 1;
    if (has_bracket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bracket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SetPlayerEloDisplayBracket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SetPlayerEloDisplayBracket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::MergeFrom(const CCSUsrMsg_SetPlayerEloDisplayBracket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bracket(from.bracket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::CopyFrom(const CCSUsrMsg_SetPlayerEloDisplayBracket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SetPlayerEloDisplayBracket::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_SetPlayerEloDisplayBracket::Swap(CCSUsrMsg_SetPlayerEloDisplayBracket* other) {
  if (other != this) {
    std::swap(bracket_, other->bracket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SetPlayerEloDisplayBracket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SetPlayerEloDisplayBracket_descriptor_;
  metadata.reflection = CCSUsrMsg_SetPlayerEloDisplayBracket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_RequestEloBracketInfo::kBracketFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RequestEloBracketInfo::CCSUsrMsg_RequestEloBracketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RequestEloBracketInfo::InitAsDefaultInstance() {
}

CCSUsrMsg_RequestEloBracketInfo::CCSUsrMsg_RequestEloBracketInfo(const CCSUsrMsg_RequestEloBracketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RequestEloBracketInfo::SharedCtor() {
  _cached_size_ = 0;
  bracket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RequestEloBracketInfo::~CCSUsrMsg_RequestEloBracketInfo() {
  SharedDtor();
}

void CCSUsrMsg_RequestEloBracketInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RequestEloBracketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RequestEloBracketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RequestEloBracketInfo_descriptor_;
}

const CCSUsrMsg_RequestEloBracketInfo& CCSUsrMsg_RequestEloBracketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_RequestEloBracketInfo* CCSUsrMsg_RequestEloBracketInfo::default_instance_ = NULL;

CCSUsrMsg_RequestEloBracketInfo* CCSUsrMsg_RequestEloBracketInfo::New() const {
  return new CCSUsrMsg_RequestEloBracketInfo;
}

void CCSUsrMsg_RequestEloBracketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bracket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RequestEloBracketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bracket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bracket_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RequestEloBracketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bracket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bracket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RequestEloBracketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bracket = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bracket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RequestEloBracketInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bracket = 1;
    if (has_bracket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bracket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RequestEloBracketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RequestEloBracketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RequestEloBracketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RequestEloBracketInfo::MergeFrom(const CCSUsrMsg_RequestEloBracketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bracket(from.bracket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RequestEloBracketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RequestEloBracketInfo::CopyFrom(const CCSUsrMsg_RequestEloBracketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RequestEloBracketInfo::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_RequestEloBracketInfo::Swap(CCSUsrMsg_RequestEloBracketInfo* other) {
  if (other != this) {
    std::swap(bracket_, other->bracket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RequestEloBracketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RequestEloBracketInfo_descriptor_;
  metadata.reflection = CCSUsrMsg_RequestEloBracketInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SetEloBracketInfo::kGameModeFieldNumber;
const int CCSUsrMsg_SetEloBracketInfo::kDisplayBracketFieldNumber;
const int CCSUsrMsg_SetEloBracketInfo::kPrevBracketFieldNumber;
const int CCSUsrMsg_SetEloBracketInfo::kNumGamesInBracketFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SetEloBracketInfo::CCSUsrMsg_SetEloBracketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SetEloBracketInfo::InitAsDefaultInstance() {
}

CCSUsrMsg_SetEloBracketInfo::CCSUsrMsg_SetEloBracketInfo(const CCSUsrMsg_SetEloBracketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SetEloBracketInfo::SharedCtor() {
  _cached_size_ = 0;
  game_mode_ = 0;
  display_bracket_ = 0;
  prev_bracket_ = 0;
  num_games_in_bracket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SetEloBracketInfo::~CCSUsrMsg_SetEloBracketInfo() {
  SharedDtor();
}

void CCSUsrMsg_SetEloBracketInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SetEloBracketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SetEloBracketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SetEloBracketInfo_descriptor_;
}

const CCSUsrMsg_SetEloBracketInfo& CCSUsrMsg_SetEloBracketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_SetEloBracketInfo* CCSUsrMsg_SetEloBracketInfo::default_instance_ = NULL;

CCSUsrMsg_SetEloBracketInfo* CCSUsrMsg_SetEloBracketInfo::New() const {
  return new CCSUsrMsg_SetEloBracketInfo;
}

void CCSUsrMsg_SetEloBracketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_mode_ = 0;
    display_bracket_ = 0;
    prev_bracket_ = 0;
    num_games_in_bracket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SetEloBracketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_mode_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_display_bracket;
        break;
      }
      
      // optional int32 display_bracket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_bracket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_bracket_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prev_bracket;
        break;
      }
      
      // optional int32 prev_bracket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_bracket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_bracket_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_games_in_bracket;
        break;
      }
      
      // optional int32 num_games_in_bracket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_games_in_bracket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_games_in_bracket_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SetEloBracketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_mode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_mode(), output);
  }
  
  // optional int32 display_bracket = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->display_bracket(), output);
  }
  
  // optional int32 prev_bracket = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prev_bracket(), output);
  }
  
  // optional int32 num_games_in_bracket = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_games_in_bracket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SetEloBracketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_mode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_mode(), target);
  }
  
  // optional int32 display_bracket = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->display_bracket(), target);
  }
  
  // optional int32 prev_bracket = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prev_bracket(), target);
  }
  
  // optional int32 num_games_in_bracket = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_games_in_bracket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SetEloBracketInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_mode = 1;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_mode());
    }
    
    // optional int32 display_bracket = 2;
    if (has_display_bracket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_bracket());
    }
    
    // optional int32 prev_bracket = 3;
    if (has_prev_bracket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_bracket());
    }
    
    // optional int32 num_games_in_bracket = 4;
    if (has_num_games_in_bracket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_games_in_bracket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SetEloBracketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SetEloBracketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SetEloBracketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SetEloBracketInfo::MergeFrom(const CCSUsrMsg_SetEloBracketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_game_mode(from.game_mode());
    }
    if (from._has_bit(1)) {
      set_display_bracket(from.display_bracket());
    }
    if (from._has_bit(2)) {
      set_prev_bracket(from.prev_bracket());
    }
    if (from._has_bit(3)) {
      set_num_games_in_bracket(from.num_games_in_bracket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SetEloBracketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SetEloBracketInfo::CopyFrom(const CCSUsrMsg_SetEloBracketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SetEloBracketInfo::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_SetEloBracketInfo::Swap(CCSUsrMsg_SetEloBracketInfo* other) {
  if (other != this) {
    std::swap(game_mode_, other->game_mode_);
    std::swap(display_bracket_, other->display_bracket_);
    std::swap(prev_bracket_, other->prev_bracket_);
    std::swap(num_games_in_bracket_, other->num_games_in_bracket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SetEloBracketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SetEloBracketInfo_descriptor_;
  metadata.reflection = CCSUsrMsg_SetEloBracketInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_CallVoteFailed::kReasonFieldNumber;
const int CCSUsrMsg_CallVoteFailed::kTimeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_CallVoteFailed::InitAsDefaultInstance() {
}

CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed(const CCSUsrMsg_CallVoteFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_CallVoteFailed::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_CallVoteFailed::~CCSUsrMsg_CallVoteFailed() {
  SharedDtor();
}

void CCSUsrMsg_CallVoteFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_CallVoteFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_CallVoteFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_CallVoteFailed_descriptor_;
}

const CCSUsrMsg_CallVoteFailed& CCSUsrMsg_CallVoteFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_CallVoteFailed* CCSUsrMsg_CallVoteFailed::default_instance_ = NULL;

CCSUsrMsg_CallVoteFailed* CCSUsrMsg_CallVoteFailed::New() const {
  return new CCSUsrMsg_CallVoteFailed;
}

void CCSUsrMsg_CallVoteFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_CallVoteFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_CallVoteFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reason = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }
  
  // optional int32 time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_CallVoteFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reason = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }
  
  // optional int32 time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_CallVoteFailed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }
    
    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_CallVoteFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_CallVoteFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_CallVoteFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_CallVoteFailed::MergeFrom(const CCSUsrMsg_CallVoteFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reason(from.reason());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_CallVoteFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_CallVoteFailed::CopyFrom(const CCSUsrMsg_CallVoteFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CallVoteFailed::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_CallVoteFailed::Swap(CCSUsrMsg_CallVoteFailed* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_CallVoteFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_CallVoteFailed_descriptor_;
  metadata.reflection = CCSUsrMsg_CallVoteFailed_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_VoteStart::_default_disp_str_;
const ::std::string CCSUsrMsg_VoteStart::_default_details_str_;
const ::std::string CCSUsrMsg_VoteStart::_default_other_team_str_;
#ifndef _MSC_VER
const int CCSUsrMsg_VoteStart::kTeamFieldNumber;
const int CCSUsrMsg_VoteStart::kEntIdxFieldNumber;
const int CCSUsrMsg_VoteStart::kVoteTypeFieldNumber;
const int CCSUsrMsg_VoteStart::kDispStrFieldNumber;
const int CCSUsrMsg_VoteStart::kDetailsStrFieldNumber;
const int CCSUsrMsg_VoteStart::kOtherTeamStrFieldNumber;
const int CCSUsrMsg_VoteStart::kIsYesNoVoteFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoteStart::InitAsDefaultInstance() {
}

CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart(const CCSUsrMsg_VoteStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoteStart::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  ent_idx_ = 0;
  vote_type_ = 0;
  disp_str_ = const_cast< ::std::string*>(&_default_disp_str_);
  details_str_ = const_cast< ::std::string*>(&_default_details_str_);
  other_team_str_ = const_cast< ::std::string*>(&_default_other_team_str_);
  is_yes_no_vote_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoteStart::~CCSUsrMsg_VoteStart() {
  SharedDtor();
}

void CCSUsrMsg_VoteStart::SharedDtor() {
  if (disp_str_ != &_default_disp_str_) {
    delete disp_str_;
  }
  if (details_str_ != &_default_details_str_) {
    delete details_str_;
  }
  if (other_team_str_ != &_default_other_team_str_) {
    delete other_team_str_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoteStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoteStart_descriptor_;
}

const CCSUsrMsg_VoteStart& CCSUsrMsg_VoteStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_VoteStart* CCSUsrMsg_VoteStart::default_instance_ = NULL;

CCSUsrMsg_VoteStart* CCSUsrMsg_VoteStart::New() const {
  return new CCSUsrMsg_VoteStart;
}

void CCSUsrMsg_VoteStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    ent_idx_ = 0;
    vote_type_ = 0;
    if (_has_bit(3)) {
      if (disp_str_ != &_default_disp_str_) {
        disp_str_->clear();
      }
    }
    if (_has_bit(4)) {
      if (details_str_ != &_default_details_str_) {
        details_str_->clear();
      }
    }
    if (_has_bit(5)) {
      if (other_team_str_ != &_default_other_team_str_) {
        other_team_str_->clear();
      }
    }
    is_yes_no_vote_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoteStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ent_idx;
        break;
      }
      
      // optional int32 ent_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ent_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vote_type;
        break;
      }
      
      // optional int32 vote_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_type_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disp_str;
        break;
      }
      
      // optional string disp_str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disp_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disp_str().data(), this->disp_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_details_str;
        break;
      }
      
      // optional string details_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details_str().data(), this->details_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_other_team_str;
        break;
      }
      
      // optional string other_team_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_team_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_team_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other_team_str().data(), this->other_team_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_yes_no_vote;
        break;
      }
      
      // optional bool is_yes_no_vote = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yes_no_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yes_no_vote_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoteStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }
  
  // optional int32 ent_idx = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ent_idx(), output);
  }
  
  // optional int32 vote_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vote_type(), output);
  }
  
  // optional string disp_str = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->disp_str(), output);
  }
  
  // optional string details_str = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->details_str(), output);
  }
  
  // optional string other_team_str = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_team_str().data(), this->other_team_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->other_team_str(), output);
  }
  
  // optional bool is_yes_no_vote = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_yes_no_vote(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoteStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }
  
  // optional int32 ent_idx = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ent_idx(), target);
  }
  
  // optional int32 vote_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vote_type(), target);
  }
  
  // optional string disp_str = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->disp_str(), target);
  }
  
  // optional string details_str = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->details_str(), target);
  }
  
  // optional string other_team_str = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_team_str().data(), this->other_team_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->other_team_str(), target);
  }
  
  // optional bool is_yes_no_vote = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_yes_no_vote(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoteStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // optional int32 ent_idx = 2;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }
    
    // optional int32 vote_type = 3;
    if (has_vote_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote_type());
    }
    
    // optional string disp_str = 4;
    if (has_disp_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disp_str());
    }
    
    // optional string details_str = 5;
    if (has_details_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details_str());
    }
    
    // optional string other_team_str = 6;
    if (has_other_team_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_team_str());
    }
    
    // optional bool is_yes_no_vote = 7;
    if (has_is_yes_no_vote()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoteStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoteStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoteStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoteStart::MergeFrom(const CCSUsrMsg_VoteStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_team(from.team());
    }
    if (from._has_bit(1)) {
      set_ent_idx(from.ent_idx());
    }
    if (from._has_bit(2)) {
      set_vote_type(from.vote_type());
    }
    if (from._has_bit(3)) {
      set_disp_str(from.disp_str());
    }
    if (from._has_bit(4)) {
      set_details_str(from.details_str());
    }
    if (from._has_bit(5)) {
      set_other_team_str(from.other_team_str());
    }
    if (from._has_bit(6)) {
      set_is_yes_no_vote(from.is_yes_no_vote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoteStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoteStart::CopyFrom(const CCSUsrMsg_VoteStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteStart::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_VoteStart::Swap(CCSUsrMsg_VoteStart* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(vote_type_, other->vote_type_);
    std::swap(disp_str_, other->disp_str_);
    std::swap(details_str_, other->details_str_);
    std::swap(other_team_str_, other->other_team_str_);
    std::swap(is_yes_no_vote_, other->is_yes_no_vote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoteStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoteStart_descriptor_;
  metadata.reflection = CCSUsrMsg_VoteStart_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_VotePass::_default_disp_str_;
const ::std::string CCSUsrMsg_VotePass::_default_details_str_;
#ifndef _MSC_VER
const int CCSUsrMsg_VotePass::kTeamFieldNumber;
const int CCSUsrMsg_VotePass::kVoteTypeFieldNumber;
const int CCSUsrMsg_VotePass::kDispStrFieldNumber;
const int CCSUsrMsg_VotePass::kDetailsStrFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VotePass::CCSUsrMsg_VotePass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VotePass::InitAsDefaultInstance() {
}

CCSUsrMsg_VotePass::CCSUsrMsg_VotePass(const CCSUsrMsg_VotePass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VotePass::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  vote_type_ = 0;
  disp_str_ = const_cast< ::std::string*>(&_default_disp_str_);
  details_str_ = const_cast< ::std::string*>(&_default_details_str_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VotePass::~CCSUsrMsg_VotePass() {
  SharedDtor();
}

void CCSUsrMsg_VotePass::SharedDtor() {
  if (disp_str_ != &_default_disp_str_) {
    delete disp_str_;
  }
  if (details_str_ != &_default_details_str_) {
    delete details_str_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VotePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VotePass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VotePass_descriptor_;
}

const CCSUsrMsg_VotePass& CCSUsrMsg_VotePass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_VotePass* CCSUsrMsg_VotePass::default_instance_ = NULL;

CCSUsrMsg_VotePass* CCSUsrMsg_VotePass::New() const {
  return new CCSUsrMsg_VotePass;
}

void CCSUsrMsg_VotePass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    vote_type_ = 0;
    if (_has_bit(2)) {
      if (disp_str_ != &_default_disp_str_) {
        disp_str_->clear();
      }
    }
    if (_has_bit(3)) {
      if (details_str_ != &_default_details_str_) {
        details_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VotePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote_type;
        break;
      }
      
      // optional int32 vote_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disp_str;
        break;
      }
      
      // optional string disp_str = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disp_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disp_str().data(), this->disp_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_details_str;
        break;
      }
      
      // optional string details_str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details_str().data(), this->details_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VotePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }
  
  // optional int32 vote_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vote_type(), output);
  }
  
  // optional string disp_str = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->disp_str(), output);
  }
  
  // optional string details_str = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->details_str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VotePass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }
  
  // optional int32 vote_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vote_type(), target);
  }
  
  // optional string disp_str = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->disp_str(), target);
  }
  
  // optional string details_str = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->details_str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VotePass::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // optional int32 vote_type = 2;
    if (has_vote_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote_type());
    }
    
    // optional string disp_str = 3;
    if (has_disp_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disp_str());
    }
    
    // optional string details_str = 4;
    if (has_details_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VotePass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VotePass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VotePass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VotePass::MergeFrom(const CCSUsrMsg_VotePass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_team(from.team());
    }
    if (from._has_bit(1)) {
      set_vote_type(from.vote_type());
    }
    if (from._has_bit(2)) {
      set_disp_str(from.disp_str());
    }
    if (from._has_bit(3)) {
      set_details_str(from.details_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VotePass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VotePass::CopyFrom(const CCSUsrMsg_VotePass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VotePass::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_VotePass::Swap(CCSUsrMsg_VotePass* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(vote_type_, other->vote_type_);
    std::swap(disp_str_, other->disp_str_);
    std::swap(details_str_, other->details_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VotePass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VotePass_descriptor_;
  metadata.reflection = CCSUsrMsg_VotePass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VoteFailed::kTeamFieldNumber;
const int CCSUsrMsg_VoteFailed::kReasonFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoteFailed::InitAsDefaultInstance() {
}

CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed(const CCSUsrMsg_VoteFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoteFailed::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoteFailed::~CCSUsrMsg_VoteFailed() {
  SharedDtor();
}

void CCSUsrMsg_VoteFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoteFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoteFailed_descriptor_;
}

const CCSUsrMsg_VoteFailed& CCSUsrMsg_VoteFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_VoteFailed* CCSUsrMsg_VoteFailed::default_instance_ = NULL;

CCSUsrMsg_VoteFailed* CCSUsrMsg_VoteFailed::New() const {
  return new CCSUsrMsg_VoteFailed;
}

void CCSUsrMsg_VoteFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoteFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional int32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoteFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }
  
  // optional int32 reason = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoteFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }
  
  // optional int32 reason = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoteFailed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // optional int32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoteFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoteFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoteFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoteFailed::MergeFrom(const CCSUsrMsg_VoteFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_team(from.team());
    }
    if (from._has_bit(1)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoteFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoteFailed::CopyFrom(const CCSUsrMsg_VoteFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteFailed::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_VoteFailed::Swap(CCSUsrMsg_VoteFailed* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoteFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoteFailed_descriptor_;
  metadata.reflection = CCSUsrMsg_VoteFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_VoteSetup::kPotentialIssuesFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_VoteSetup::InitAsDefaultInstance() {
}

CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup(const CCSUsrMsg_VoteSetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_VoteSetup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_VoteSetup::~CCSUsrMsg_VoteSetup() {
  SharedDtor();
}

void CCSUsrMsg_VoteSetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_VoteSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_VoteSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_VoteSetup_descriptor_;
}

const CCSUsrMsg_VoteSetup& CCSUsrMsg_VoteSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_VoteSetup* CCSUsrMsg_VoteSetup::default_instance_ = NULL;

CCSUsrMsg_VoteSetup* CCSUsrMsg_VoteSetup::New() const {
  return new CCSUsrMsg_VoteSetup;
}

void CCSUsrMsg_VoteSetup::Clear() {
  potential_issues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_VoteSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string potential_issues = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_potential_issues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_potential_issues()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->potential_issues(0).data(), this->potential_issues(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_potential_issues;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_VoteSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string potential_issues = 1;
  for (int i = 0; i < this->potential_issues_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->potential_issues(i).data(), this->potential_issues(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->potential_issues(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_VoteSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string potential_issues = 1;
  for (int i = 0; i < this->potential_issues_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->potential_issues(i).data(), this->potential_issues(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->potential_issues(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_VoteSetup::ByteSize() const {
  int total_size = 0;
  
  // repeated string potential_issues = 1;
  total_size += 1 * this->potential_issues_size();
  for (int i = 0; i < this->potential_issues_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->potential_issues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_VoteSetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_VoteSetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_VoteSetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_VoteSetup::MergeFrom(const CCSUsrMsg_VoteSetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  potential_issues_.MergeFrom(from.potential_issues_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_VoteSetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_VoteSetup::CopyFrom(const CCSUsrMsg_VoteSetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteSetup::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_VoteSetup::Swap(CCSUsrMsg_VoteSetup* other) {
  if (other != this) {
    potential_issues_.Swap(&other->potential_issues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_VoteSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_VoteSetup_descriptor_;
  metadata.reflection = CCSUsrMsg_VoteSetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_SendLastKillerDamageToClient::kNumHitsGivenFieldNumber;
const int CCSUsrMsg_SendLastKillerDamageToClient::kDamageGivenFieldNumber;
const int CCSUsrMsg_SendLastKillerDamageToClient::kNumHitsTakenFieldNumber;
const int CCSUsrMsg_SendLastKillerDamageToClient::kDamageTakenFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_SendLastKillerDamageToClient::InitAsDefaultInstance() {
}

CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient(const CCSUsrMsg_SendLastKillerDamageToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_SendLastKillerDamageToClient::SharedCtor() {
  _cached_size_ = 0;
  num_hits_given_ = 0;
  damage_given_ = 0;
  num_hits_taken_ = 0;
  damage_taken_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_SendLastKillerDamageToClient::~CCSUsrMsg_SendLastKillerDamageToClient() {
  SharedDtor();
}

void CCSUsrMsg_SendLastKillerDamageToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_SendLastKillerDamageToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_SendLastKillerDamageToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_SendLastKillerDamageToClient_descriptor_;
}

const CCSUsrMsg_SendLastKillerDamageToClient& CCSUsrMsg_SendLastKillerDamageToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_SendLastKillerDamageToClient* CCSUsrMsg_SendLastKillerDamageToClient::default_instance_ = NULL;

CCSUsrMsg_SendLastKillerDamageToClient* CCSUsrMsg_SendLastKillerDamageToClient::New() const {
  return new CCSUsrMsg_SendLastKillerDamageToClient;
}

void CCSUsrMsg_SendLastKillerDamageToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_hits_given_ = 0;
    damage_given_ = 0;
    num_hits_taken_ = 0;
    damage_taken_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_SendLastKillerDamageToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_hits_given = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hits_given_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage_given;
        break;
      }
      
      // optional int32 damage_given = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_given:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_given_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_hits_taken;
        break;
      }
      
      // optional int32 num_hits_taken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_hits_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hits_taken_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage_taken;
        break;
      }
      
      // optional int32 damage_taken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_taken_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_SendLastKillerDamageToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_hits_given = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_hits_given(), output);
  }
  
  // optional int32 damage_given = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage_given(), output);
  }
  
  // optional int32 num_hits_taken = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_hits_taken(), output);
  }
  
  // optional int32 damage_taken = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage_taken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_SendLastKillerDamageToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_hits_given = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hits_given(), target);
  }
  
  // optional int32 damage_given = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage_given(), target);
  }
  
  // optional int32 num_hits_taken = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_hits_taken(), target);
  }
  
  // optional int32 damage_taken = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage_taken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_SendLastKillerDamageToClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_hits_given = 1;
    if (has_num_hits_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hits_given());
    }
    
    // optional int32 damage_given = 2;
    if (has_damage_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_given());
    }
    
    // optional int32 num_hits_taken = 3;
    if (has_num_hits_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hits_taken());
    }
    
    // optional int32 damage_taken = 4;
    if (has_damage_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_taken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_SendLastKillerDamageToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_SendLastKillerDamageToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_SendLastKillerDamageToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_SendLastKillerDamageToClient::MergeFrom(const CCSUsrMsg_SendLastKillerDamageToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_num_hits_given(from.num_hits_given());
    }
    if (from._has_bit(1)) {
      set_damage_given(from.damage_given());
    }
    if (from._has_bit(2)) {
      set_num_hits_taken(from.num_hits_taken());
    }
    if (from._has_bit(3)) {
      set_damage_taken(from.damage_taken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_SendLastKillerDamageToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_SendLastKillerDamageToClient::CopyFrom(const CCSUsrMsg_SendLastKillerDamageToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendLastKillerDamageToClient::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_SendLastKillerDamageToClient::Swap(CCSUsrMsg_SendLastKillerDamageToClient* other) {
  if (other != this) {
    std::swap(num_hits_given_, other->num_hits_given_);
    std::swap(damage_given_, other->damage_given_);
    std::swap(num_hits_taken_, other->num_hits_taken_);
    std::swap(damage_taken_, other->damage_taken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_SendLastKillerDamageToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_SendLastKillerDamageToClient_descriptor_;
  metadata.reflection = CCSUsrMsg_SendLastKillerDamageToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kAccountIdFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kRankOldFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kRankNewFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kNumWinsFieldNumber;
const int CCSUsrMsg_ServerRankUpdate_RankUpdate::kRankChangeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0;
  rank_old_ = 0;
  rank_new_ = 0;
  num_wins_ = 0;
  rank_change_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ServerRankUpdate_RankUpdate::~CCSUsrMsg_ServerRankUpdate_RankUpdate() {
  SharedDtor();
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankUpdate_RankUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_;
}

const CCSUsrMsg_ServerRankUpdate_RankUpdate& CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ServerRankUpdate_RankUpdate* CCSUsrMsg_ServerRankUpdate_RankUpdate::default_instance_ = NULL;

CCSUsrMsg_ServerRankUpdate_RankUpdate* CCSUsrMsg_ServerRankUpdate_RankUpdate::New() const {
  return new CCSUsrMsg_ServerRankUpdate_RankUpdate;
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0;
    rank_old_ = 0;
    rank_new_ = 0;
    num_wins_ = 0;
    rank_change_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ServerRankUpdate_RankUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_old;
        break;
      }
      
      // optional int32 rank_old = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_old_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_new;
        break;
      }
      
      // optional int32 rank_new = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_new_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_wins;
        break;
      }
      
      // optional int32 num_wins = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_wins_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rank_change;
        break;
      }
      
      // optional float rank_change = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_change_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->account_id(), output);
  }
  
  // optional int32 rank_old = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_old(), output);
  }
  
  // optional int32 rank_new = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_new(), output);
  }
  
  // optional int32 num_wins = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_wins(), output);
  }
  
  // optional float rank_change = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rank_change(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ServerRankUpdate_RankUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->account_id(), target);
  }
  
  // optional int32 rank_old = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_old(), target);
  }
  
  // optional int32 rank_new = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_new(), target);
  }
  
  // optional int32 num_wins = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_wins(), target);
  }
  
  // optional float rank_change = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rank_change(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ServerRankUpdate_RankUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }
    
    // optional int32 rank_old = 2;
    if (has_rank_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_old());
    }
    
    // optional int32 rank_new = 3;
    if (has_rank_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_new());
    }
    
    // optional int32 num_wins = 4;
    if (has_num_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_wins());
    }
    
    // optional float rank_change = 5;
    if (has_rank_change()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ServerRankUpdate_RankUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ServerRankUpdate_RankUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeFrom(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_rank_old(from.rank_old());
    }
    if (from._has_bit(2)) {
      set_rank_new(from.rank_new());
    }
    if (from._has_bit(3)) {
      set_num_wins(from.num_wins());
    }
    if (from._has_bit(4)) {
      set_rank_change(from.rank_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::CopyFrom(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankUpdate_RankUpdate::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::Swap(CCSUsrMsg_ServerRankUpdate_RankUpdate* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(rank_old_, other->rank_old_);
    std::swap(rank_new_, other->rank_new_);
    std::swap(num_wins_, other->num_wins_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ServerRankUpdate_RankUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ServerRankUpdate_RankUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_ServerRankUpdate_RankUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CCSUsrMsg_ServerRankUpdate::kRankUpdateFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ServerRankUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate(const CCSUsrMsg_ServerRankUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ServerRankUpdate::~CCSUsrMsg_ServerRankUpdate() {
  SharedDtor();
}

void CCSUsrMsg_ServerRankUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ServerRankUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ServerRankUpdate_descriptor_;
}

const CCSUsrMsg_ServerRankUpdate& CCSUsrMsg_ServerRankUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ServerRankUpdate* CCSUsrMsg_ServerRankUpdate::default_instance_ = NULL;

CCSUsrMsg_ServerRankUpdate* CCSUsrMsg_ServerRankUpdate::New() const {
  return new CCSUsrMsg_ServerRankUpdate;
}

void CCSUsrMsg_ServerRankUpdate::Clear() {
  rank_update_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ServerRankUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_update;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ServerRankUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  for (int i = 0; i < this->rank_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_update(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ServerRankUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  for (int i = 0; i < this->rank_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_update(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ServerRankUpdate::ByteSize() const {
  int total_size = 0;
  
  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  total_size += 1 * this->rank_update_size();
  for (int i = 0; i < this->rank_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_update(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ServerRankUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ServerRankUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ServerRankUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ServerRankUpdate::MergeFrom(const CCSUsrMsg_ServerRankUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_update_.MergeFrom(from.rank_update_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ServerRankUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankUpdate::CopyFrom(const CCSUsrMsg_ServerRankUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankUpdate::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ServerRankUpdate::Swap(CCSUsrMsg_ServerRankUpdate* other) {
  if (other != this) {
    rank_update_.Swap(&other->rank_update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ServerRankUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ServerRankUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_ServerRankUpdate_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_ItemPickup::_default_item_;
#ifndef _MSC_VER
const int CCSUsrMsg_ItemPickup::kItemFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ItemPickup::InitAsDefaultInstance() {
}

CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup(const CCSUsrMsg_ItemPickup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ItemPickup::SharedCtor() {
  _cached_size_ = 0;
  item_ = const_cast< ::std::string*>(&_default_item_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ItemPickup::~CCSUsrMsg_ItemPickup() {
  SharedDtor();
}

void CCSUsrMsg_ItemPickup::SharedDtor() {
  if (item_ != &_default_item_) {
    delete item_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ItemPickup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ItemPickup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ItemPickup_descriptor_;
}

const CCSUsrMsg_ItemPickup& CCSUsrMsg_ItemPickup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ItemPickup* CCSUsrMsg_ItemPickup::default_instance_ = NULL;

CCSUsrMsg_ItemPickup* CCSUsrMsg_ItemPickup::New() const {
  return new CCSUsrMsg_ItemPickup;
}

void CCSUsrMsg_ItemPickup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (item_ != &_default_item_) {
        item_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ItemPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ItemPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string item = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ItemPickup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string item = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ItemPickup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ItemPickup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ItemPickup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ItemPickup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ItemPickup::MergeFrom(const CCSUsrMsg_ItemPickup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ItemPickup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ItemPickup::CopyFrom(const CCSUsrMsg_ItemPickup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ItemPickup::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ItemPickup::Swap(CCSUsrMsg_ItemPickup* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ItemPickup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ItemPickup_descriptor_;
  metadata.reflection = CCSUsrMsg_ItemPickup_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_ShowMenu::_default_menu_string_;
#ifndef _MSC_VER
const int CCSUsrMsg_ShowMenu::kBitsValidSlotsFieldNumber;
const int CCSUsrMsg_ShowMenu::kDisplayTimeFieldNumber;
const int CCSUsrMsg_ShowMenu::kMenuStringFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ShowMenu::InitAsDefaultInstance() {
}

CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu(const CCSUsrMsg_ShowMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ShowMenu::SharedCtor() {
  _cached_size_ = 0;
  bits_valid_slots_ = 0;
  display_time_ = 0;
  menu_string_ = const_cast< ::std::string*>(&_default_menu_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ShowMenu::~CCSUsrMsg_ShowMenu() {
  SharedDtor();
}

void CCSUsrMsg_ShowMenu::SharedDtor() {
  if (menu_string_ != &_default_menu_string_) {
    delete menu_string_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ShowMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ShowMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ShowMenu_descriptor_;
}

const CCSUsrMsg_ShowMenu& CCSUsrMsg_ShowMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ShowMenu* CCSUsrMsg_ShowMenu::default_instance_ = NULL;

CCSUsrMsg_ShowMenu* CCSUsrMsg_ShowMenu::New() const {
  return new CCSUsrMsg_ShowMenu;
}

void CCSUsrMsg_ShowMenu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bits_valid_slots_ = 0;
    display_time_ = 0;
    if (_has_bit(2)) {
      if (menu_string_ != &_default_menu_string_) {
        menu_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ShowMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bits_valid_slots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_valid_slots_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_display_time;
        break;
      }
      
      // optional int32 display_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_menu_string;
        break;
      }
      
      // optional string menu_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menu_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->menu_string().data(), this->menu_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ShowMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bits_valid_slots = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bits_valid_slots(), output);
  }
  
  // optional int32 display_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->display_time(), output);
  }
  
  // optional string menu_string = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu_string().data(), this->menu_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->menu_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ShowMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bits_valid_slots = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bits_valid_slots(), target);
  }
  
  // optional int32 display_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->display_time(), target);
  }
  
  // optional string menu_string = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu_string().data(), this->menu_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->menu_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ShowMenu::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bits_valid_slots = 1;
    if (has_bits_valid_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits_valid_slots());
    }
    
    // optional int32 display_time = 2;
    if (has_display_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_time());
    }
    
    // optional string menu_string = 3;
    if (has_menu_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menu_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ShowMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ShowMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ShowMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ShowMenu::MergeFrom(const CCSUsrMsg_ShowMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bits_valid_slots(from.bits_valid_slots());
    }
    if (from._has_bit(1)) {
      set_display_time(from.display_time());
    }
    if (from._has_bit(2)) {
      set_menu_string(from.menu_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ShowMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ShowMenu::CopyFrom(const CCSUsrMsg_ShowMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ShowMenu::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ShowMenu::Swap(CCSUsrMsg_ShowMenu* other) {
  if (other != this) {
    std::swap(bits_valid_slots_, other->bits_valid_slots_);
    std::swap(display_time_, other->display_time_);
    std::swap(menu_string_, other->menu_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ShowMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ShowMenu_descriptor_;
  metadata.reflection = CCSUsrMsg_ShowMenu_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_BarTime::_default_time_;
#ifndef _MSC_VER
const int CCSUsrMsg_BarTime::kTimeFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_BarTime::CCSUsrMsg_BarTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_BarTime::InitAsDefaultInstance() {
}

CCSUsrMsg_BarTime::CCSUsrMsg_BarTime(const CCSUsrMsg_BarTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_BarTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = const_cast< ::std::string*>(&_default_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_BarTime::~CCSUsrMsg_BarTime() {
  SharedDtor();
}

void CCSUsrMsg_BarTime::SharedDtor() {
  if (time_ != &_default_time_) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_BarTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_BarTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_BarTime_descriptor_;
}

const CCSUsrMsg_BarTime& CCSUsrMsg_BarTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_BarTime* CCSUsrMsg_BarTime::default_instance_ = NULL;

CCSUsrMsg_BarTime* CCSUsrMsg_BarTime::New() const {
  return new CCSUsrMsg_BarTime;
}

void CCSUsrMsg_BarTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (time_ != &_default_time_) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_BarTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_BarTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_BarTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_BarTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_BarTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_BarTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_BarTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_BarTime::MergeFrom(const CCSUsrMsg_BarTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_BarTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_BarTime::CopyFrom(const CCSUsrMsg_BarTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_BarTime::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_BarTime::Swap(CCSUsrMsg_BarTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_BarTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_BarTime_descriptor_;
  metadata.reflection = CCSUsrMsg_BarTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_AmmoDenied::kAmmoIdxFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_AmmoDenied::InitAsDefaultInstance() {
}

CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied(const CCSUsrMsg_AmmoDenied& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_AmmoDenied::SharedCtor() {
  _cached_size_ = 0;
  ammoidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_AmmoDenied::~CCSUsrMsg_AmmoDenied() {
  SharedDtor();
}

void CCSUsrMsg_AmmoDenied::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_AmmoDenied::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_AmmoDenied::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_AmmoDenied_descriptor_;
}

const CCSUsrMsg_AmmoDenied& CCSUsrMsg_AmmoDenied::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_AmmoDenied* CCSUsrMsg_AmmoDenied::default_instance_ = NULL;

CCSUsrMsg_AmmoDenied* CCSUsrMsg_AmmoDenied::New() const {
  return new CCSUsrMsg_AmmoDenied;
}

void CCSUsrMsg_AmmoDenied::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ammoidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_AmmoDenied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ammoIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ammoidx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_AmmoDenied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ammoIdx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ammoidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_AmmoDenied::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ammoIdx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ammoidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_AmmoDenied::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ammoIdx = 1;
    if (has_ammoidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ammoidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_AmmoDenied::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_AmmoDenied* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_AmmoDenied*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_AmmoDenied::MergeFrom(const CCSUsrMsg_AmmoDenied& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ammoidx(from.ammoidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_AmmoDenied::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_AmmoDenied::CopyFrom(const CCSUsrMsg_AmmoDenied& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AmmoDenied::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_AmmoDenied::Swap(CCSUsrMsg_AmmoDenied* other) {
  if (other != this) {
    std::swap(ammoidx_, other->ammoidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_AmmoDenied::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_AmmoDenied_descriptor_;
  metadata.reflection = CCSUsrMsg_AmmoDenied_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_MarkAchievement::_default_achievement_;
#ifndef _MSC_VER
const int CCSUsrMsg_MarkAchievement::kAchievementFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_MarkAchievement::InitAsDefaultInstance() {
}

CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement(const CCSUsrMsg_MarkAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_MarkAchievement::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = const_cast< ::std::string*>(&_default_achievement_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_MarkAchievement::~CCSUsrMsg_MarkAchievement() {
  SharedDtor();
}

void CCSUsrMsg_MarkAchievement::SharedDtor() {
  if (achievement_ != &_default_achievement_) {
    delete achievement_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_MarkAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_MarkAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_MarkAchievement_descriptor_;
}

const CCSUsrMsg_MarkAchievement& CCSUsrMsg_MarkAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_MarkAchievement* CCSUsrMsg_MarkAchievement::default_instance_ = NULL;

CCSUsrMsg_MarkAchievement* CCSUsrMsg_MarkAchievement::New() const {
  return new CCSUsrMsg_MarkAchievement;
}

void CCSUsrMsg_MarkAchievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (achievement_ != &_default_achievement_) {
        achievement_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_MarkAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_achievement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->achievement().data(), this->achievement().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_MarkAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string achievement = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achievement().data(), this->achievement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->achievement(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_MarkAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string achievement = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achievement().data(), this->achievement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->achievement(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_MarkAchievement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string achievement = 1;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->achievement());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_MarkAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_MarkAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_MarkAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_MarkAchievement::MergeFrom(const CCSUsrMsg_MarkAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_achievement(from.achievement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_MarkAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_MarkAchievement::CopyFrom(const CCSUsrMsg_MarkAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MarkAchievement::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_MarkAchievement::Swap(CCSUsrMsg_MarkAchievement* other) {
  if (other != this) {
    std::swap(achievement_, other->achievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_MarkAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_MarkAchievement_descriptor_;
  metadata.reflection = CCSUsrMsg_MarkAchievement_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCSUsrMsg_MatchStatsUpdate::_default_update_;
#ifndef _MSC_VER
const int CCSUsrMsg_MatchStatsUpdate::kUpdateFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_MatchStatsUpdate::InitAsDefaultInstance() {
}

CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate(const CCSUsrMsg_MatchStatsUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_MatchStatsUpdate::SharedCtor() {
  _cached_size_ = 0;
  update_ = const_cast< ::std::string*>(&_default_update_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_MatchStatsUpdate::~CCSUsrMsg_MatchStatsUpdate() {
  SharedDtor();
}

void CCSUsrMsg_MatchStatsUpdate::SharedDtor() {
  if (update_ != &_default_update_) {
    delete update_;
  }
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_MatchStatsUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_MatchStatsUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_MatchStatsUpdate_descriptor_;
}

const CCSUsrMsg_MatchStatsUpdate& CCSUsrMsg_MatchStatsUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_MatchStatsUpdate* CCSUsrMsg_MatchStatsUpdate::default_instance_ = NULL;

CCSUsrMsg_MatchStatsUpdate* CCSUsrMsg_MatchStatsUpdate::New() const {
  return new CCSUsrMsg_MatchStatsUpdate;
}

void CCSUsrMsg_MatchStatsUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (update_ != &_default_update_) {
        update_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_MatchStatsUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update().data(), this->update().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_MatchStatsUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string update = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update().data(), this->update().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->update(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_MatchStatsUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string update = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update().data(), this->update().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->update(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_MatchStatsUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string update = 1;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_MatchStatsUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_MatchStatsUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_MatchStatsUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_MatchStatsUpdate::MergeFrom(const CCSUsrMsg_MatchStatsUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_update(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_MatchStatsUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_MatchStatsUpdate::CopyFrom(const CCSUsrMsg_MatchStatsUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MatchStatsUpdate::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_MatchStatsUpdate::Swap(CCSUsrMsg_MatchStatsUpdate* other) {
  if (other != this) {
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_MatchStatsUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_MatchStatsUpdate_descriptor_;
  metadata.reflection = CCSUsrMsg_MatchStatsUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ItemDrop::kItemidFieldNumber;
const int CCSUsrMsg_ItemDrop::kDeathFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ItemDrop::InitAsDefaultInstance() {
}

CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop(const CCSUsrMsg_ItemDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ItemDrop::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  death_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ItemDrop::~CCSUsrMsg_ItemDrop() {
  SharedDtor();
}

void CCSUsrMsg_ItemDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ItemDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ItemDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ItemDrop_descriptor_;
}

const CCSUsrMsg_ItemDrop& CCSUsrMsg_ItemDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ItemDrop* CCSUsrMsg_ItemDrop::default_instance_ = NULL;

CCSUsrMsg_ItemDrop* CCSUsrMsg_ItemDrop::New() const {
  return new CCSUsrMsg_ItemDrop;
}

void CCSUsrMsg_ItemDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_LONGLONG(0);
    death_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ItemDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_death;
        break;
      }
      
      // optional bool death = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_death:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &death_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ItemDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 itemid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemid(), output);
  }
  
  // optional bool death = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->death(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ItemDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 itemid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemid(), target);
  }
  
  // optional bool death = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->death(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ItemDrop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }
    
    // optional bool death = 2;
    if (has_death()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ItemDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ItemDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ItemDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ItemDrop::MergeFrom(const CCSUsrMsg_ItemDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_death(from.death());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ItemDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ItemDrop::CopyFrom(const CCSUsrMsg_ItemDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ItemDrop::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ItemDrop::Swap(CCSUsrMsg_ItemDrop* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(death_, other->death_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ItemDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ItemDrop_descriptor_;
  metadata.reflection = CCSUsrMsg_ItemDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ResetHud::kResetFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ResetHud::InitAsDefaultInstance() {
}

CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud(const CCSUsrMsg_ResetHud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ResetHud::SharedCtor() {
  _cached_size_ = 0;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ResetHud::~CCSUsrMsg_ResetHud() {
  SharedDtor();
}

void CCSUsrMsg_ResetHud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ResetHud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ResetHud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ResetHud_descriptor_;
}

const CCSUsrMsg_ResetHud& CCSUsrMsg_ResetHud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ResetHud* CCSUsrMsg_ResetHud::default_instance_ = NULL;

CCSUsrMsg_ResetHud* CCSUsrMsg_ResetHud::New() const {
  return new CCSUsrMsg_ResetHud;
}

void CCSUsrMsg_ResetHud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ResetHud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ResetHud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool reset = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ResetHud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool reset = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ResetHud::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool reset = 1;
    if (has_reset()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ResetHud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ResetHud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ResetHud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ResetHud::MergeFrom(const CCSUsrMsg_ResetHud& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ResetHud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ResetHud::CopyFrom(const CCSUsrMsg_ResetHud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ResetHud::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ResetHud::Swap(CCSUsrMsg_ResetHud* other) {
  if (other != this) {
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ResetHud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ResetHud_descriptor_;
  metadata.reflection = CCSUsrMsg_ResetHud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_GameTitle::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_GameTitle::InitAsDefaultInstance() {
}

CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle(const CCSUsrMsg_GameTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_GameTitle::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_GameTitle::~CCSUsrMsg_GameTitle() {
  SharedDtor();
}

void CCSUsrMsg_GameTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_GameTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_GameTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_GameTitle_descriptor_;
}

const CCSUsrMsg_GameTitle& CCSUsrMsg_GameTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_GameTitle* CCSUsrMsg_GameTitle::default_instance_ = NULL;

CCSUsrMsg_GameTitle* CCSUsrMsg_GameTitle::New() const {
  return new CCSUsrMsg_GameTitle;
}

void CCSUsrMsg_GameTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_GameTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_GameTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_GameTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_GameTitle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_GameTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_GameTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_GameTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_GameTitle::MergeFrom(const CCSUsrMsg_GameTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_GameTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_GameTitle::CopyFrom(const CCSUsrMsg_GameTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_GameTitle::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_GameTitle::Swap(CCSUsrMsg_GameTitle* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_GameTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_GameTitle_descriptor_;
  metadata.reflection = CCSUsrMsg_GameTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_RequestState::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_RequestState::CCSUsrMsg_RequestState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_RequestState::InitAsDefaultInstance() {
}

CCSUsrMsg_RequestState::CCSUsrMsg_RequestState(const CCSUsrMsg_RequestState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_RequestState::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_RequestState::~CCSUsrMsg_RequestState() {
  SharedDtor();
}

void CCSUsrMsg_RequestState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_RequestState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_RequestState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_RequestState_descriptor_;
}

const CCSUsrMsg_RequestState& CCSUsrMsg_RequestState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_RequestState* CCSUsrMsg_RequestState::default_instance_ = NULL;

CCSUsrMsg_RequestState* CCSUsrMsg_RequestState::New() const {
  return new CCSUsrMsg_RequestState;
}

void CCSUsrMsg_RequestState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_RequestState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_RequestState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_RequestState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_RequestState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_RequestState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_RequestState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_RequestState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_RequestState::MergeFrom(const CCSUsrMsg_RequestState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_RequestState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_RequestState::CopyFrom(const CCSUsrMsg_RequestState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RequestState::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_RequestState::Swap(CCSUsrMsg_RequestState* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_RequestState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_RequestState_descriptor_;
  metadata.reflection = CCSUsrMsg_RequestState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_StopSpectatorMode::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_StopSpectatorMode::InitAsDefaultInstance() {
}

CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode(const CCSUsrMsg_StopSpectatorMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_StopSpectatorMode::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_StopSpectatorMode::~CCSUsrMsg_StopSpectatorMode() {
  SharedDtor();
}

void CCSUsrMsg_StopSpectatorMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_StopSpectatorMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_StopSpectatorMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_StopSpectatorMode_descriptor_;
}

const CCSUsrMsg_StopSpectatorMode& CCSUsrMsg_StopSpectatorMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_StopSpectatorMode* CCSUsrMsg_StopSpectatorMode::default_instance_ = NULL;

CCSUsrMsg_StopSpectatorMode* CCSUsrMsg_StopSpectatorMode::New() const {
  return new CCSUsrMsg_StopSpectatorMode;
}

void CCSUsrMsg_StopSpectatorMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_StopSpectatorMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_StopSpectatorMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_StopSpectatorMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_StopSpectatorMode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_StopSpectatorMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_StopSpectatorMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_StopSpectatorMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_StopSpectatorMode::MergeFrom(const CCSUsrMsg_StopSpectatorMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_StopSpectatorMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_StopSpectatorMode::CopyFrom(const CCSUsrMsg_StopSpectatorMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_StopSpectatorMode::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_StopSpectatorMode::Swap(CCSUsrMsg_StopSpectatorMode* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_StopSpectatorMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_StopSpectatorMode_descriptor_;
  metadata.reflection = CCSUsrMsg_StopSpectatorMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_DisconnectToLobby::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_DisconnectToLobby::InitAsDefaultInstance() {
}

CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby(const CCSUsrMsg_DisconnectToLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_DisconnectToLobby::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_DisconnectToLobby::~CCSUsrMsg_DisconnectToLobby() {
  SharedDtor();
}

void CCSUsrMsg_DisconnectToLobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_DisconnectToLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_DisconnectToLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_DisconnectToLobby_descriptor_;
}

const CCSUsrMsg_DisconnectToLobby& CCSUsrMsg_DisconnectToLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_DisconnectToLobby* CCSUsrMsg_DisconnectToLobby::default_instance_ = NULL;

CCSUsrMsg_DisconnectToLobby* CCSUsrMsg_DisconnectToLobby::New() const {
  return new CCSUsrMsg_DisconnectToLobby;
}

void CCSUsrMsg_DisconnectToLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_DisconnectToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_DisconnectToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_DisconnectToLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_DisconnectToLobby::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_DisconnectToLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_DisconnectToLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_DisconnectToLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_DisconnectToLobby::MergeFrom(const CCSUsrMsg_DisconnectToLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_DisconnectToLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_DisconnectToLobby::CopyFrom(const CCSUsrMsg_DisconnectToLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DisconnectToLobby::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_DisconnectToLobby::Swap(CCSUsrMsg_DisconnectToLobby* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_DisconnectToLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_DisconnectToLobby_descriptor_;
  metadata.reflection = CCSUsrMsg_DisconnectToLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_WarmupHasEnded::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_WarmupHasEnded::InitAsDefaultInstance() {
}

CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded(const CCSUsrMsg_WarmupHasEnded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_WarmupHasEnded::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_WarmupHasEnded::~CCSUsrMsg_WarmupHasEnded() {
  SharedDtor();
}

void CCSUsrMsg_WarmupHasEnded::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_WarmupHasEnded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_WarmupHasEnded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_WarmupHasEnded_descriptor_;
}

const CCSUsrMsg_WarmupHasEnded& CCSUsrMsg_WarmupHasEnded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_WarmupHasEnded* CCSUsrMsg_WarmupHasEnded::default_instance_ = NULL;

CCSUsrMsg_WarmupHasEnded* CCSUsrMsg_WarmupHasEnded::New() const {
  return new CCSUsrMsg_WarmupHasEnded;
}

void CCSUsrMsg_WarmupHasEnded::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_WarmupHasEnded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_WarmupHasEnded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_WarmupHasEnded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_WarmupHasEnded::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_WarmupHasEnded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_WarmupHasEnded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_WarmupHasEnded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_WarmupHasEnded::MergeFrom(const CCSUsrMsg_WarmupHasEnded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_WarmupHasEnded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_WarmupHasEnded::CopyFrom(const CCSUsrMsg_WarmupHasEnded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_WarmupHasEnded::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_WarmupHasEnded::Swap(CCSUsrMsg_WarmupHasEnded* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_WarmupHasEnded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_WarmupHasEnded_descriptor_;
  metadata.reflection = CCSUsrMsg_WarmupHasEnded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ClientInfo::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ClientInfo::InitAsDefaultInstance() {
}

CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo(const CCSUsrMsg_ClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ClientInfo::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ClientInfo::~CCSUsrMsg_ClientInfo() {
  SharedDtor();
}

void CCSUsrMsg_ClientInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ClientInfo_descriptor_;
}

const CCSUsrMsg_ClientInfo& CCSUsrMsg_ClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ClientInfo* CCSUsrMsg_ClientInfo::default_instance_ = NULL;

CCSUsrMsg_ClientInfo* CCSUsrMsg_ClientInfo::New() const {
  return new CCSUsrMsg_ClientInfo;
}

void CCSUsrMsg_ClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ClientInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ClientInfo::MergeFrom(const CCSUsrMsg_ClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ClientInfo::CopyFrom(const CCSUsrMsg_ClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ClientInfo::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ClientInfo::Swap(CCSUsrMsg_ClientInfo* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ClientInfo_descriptor_;
  metadata.reflection = CCSUsrMsg_ClientInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSUsrMsg_ServerRankRevealAll::kDummyFieldNumber;
#endif  // !_MSC_VER

CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSUsrMsg_ServerRankRevealAll::InitAsDefaultInstance() {
}

CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll(const CCSUsrMsg_ServerRankRevealAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankRevealAll::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSUsrMsg_ServerRankRevealAll::~CCSUsrMsg_ServerRankRevealAll() {
  SharedDtor();
}

void CCSUsrMsg_ServerRankRevealAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCSUsrMsg_ServerRankRevealAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSUsrMsg_ServerRankRevealAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSUsrMsg_ServerRankRevealAll_descriptor_;
}

const CCSUsrMsg_ServerRankRevealAll& CCSUsrMsg_ServerRankRevealAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fusermessages_2eproto();  return *default_instance_;
}

CCSUsrMsg_ServerRankRevealAll* CCSUsrMsg_ServerRankRevealAll::default_instance_ = NULL;

CCSUsrMsg_ServerRankRevealAll* CCSUsrMsg_ServerRankRevealAll::New() const {
  return new CCSUsrMsg_ServerRankRevealAll;
}

void CCSUsrMsg_ServerRankRevealAll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSUsrMsg_ServerRankRevealAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSUsrMsg_ServerRankRevealAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSUsrMsg_ServerRankRevealAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSUsrMsg_ServerRankRevealAll::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSUsrMsg_ServerRankRevealAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSUsrMsg_ServerRankRevealAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSUsrMsg_ServerRankRevealAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSUsrMsg_ServerRankRevealAll::MergeFrom(const CCSUsrMsg_ServerRankRevealAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSUsrMsg_ServerRankRevealAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSUsrMsg_ServerRankRevealAll::CopyFrom(const CCSUsrMsg_ServerRankRevealAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankRevealAll::IsInitialized() const {
  
  return true;
}

void CCSUsrMsg_ServerRankRevealAll::Swap(CCSUsrMsg_ServerRankRevealAll* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSUsrMsg_ServerRankRevealAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSUsrMsg_ServerRankRevealAll_descriptor_;
  metadata.reflection = CCSUsrMsg_ServerRankRevealAll_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
